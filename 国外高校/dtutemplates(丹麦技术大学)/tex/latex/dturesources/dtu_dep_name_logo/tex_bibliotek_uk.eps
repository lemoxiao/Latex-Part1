%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GPL Ghostscript 871 (epswrite)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 69 13
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq pdfPatternCS not and {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne pdfPatternCS or {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
/DeviceGray {} cs
[0] sc
141.141 112.27 m
141.141 119.68 l
141.141 120.98 140.109 121.891 138.801 121.891 c
80.4805 121.891 l
79.1602 121.891 78.0703 120.93 78.0703 119.68 c
78.0703 112.27 l
78.0703 110.941 79.1602 110.219 80.4805 110.219 c
102.73 110.219 l
102.73 34.9492 l
102.73 33.6289 103.738 32.5508 105.02 32.5508 c
114.281 32.5508 l
115.609 32.5508 116.57 33.6914 116.57 34.9492 c
116.57 110.219 l
138.82 110.219 l
140.141 110.219 141.16 111 141.16 112.27 c
141.141 112.27 l
h
216.309 65.3203 m
216.309 119.609 l
216.309 120.93 215.23 121.898 213.969 121.898 c
204.77 121.898 l
203.449 121.898 202.43 120.879 202.43 119.609 c
202.43 65.3203 l
202.43 50.6484 198.34 43.25 184.391 43.25 c
170.441 43.25 166.359 50.7109 166.359 65.3203 c
166.359 119.609 l
166.359 120.93 165.27 121.898 164.012 121.898 c
154.82 121.898 l
153.488 121.898 152.469 120.879 152.469 119.609 c
152.469 65.3203 l
152.469 41.0195 164.98 31.6484 184.398 31.6484 c
203.809 31.6484 216.32 41.0313 216.32 65.3203 c
216.309 65.3203 l
h
57.1602 72.1602 m
57.1602 60.9102 55.8398 54.0391 50.9883 49.1406 c
46.7813 44.8906 40.7383 43.3906 33.8281 43.3906 c
28.7813 43.3906 25.2891 43.5117 22.1094 43.6914 c
22.1094 110.719 l
25.3516 110.898 28.7813 111.07 33.8281 111.07 c
40.4609 111.07 46.3008 109.699 50.4805 105.84 c
55.6211 101.059 57.1602 93.8984 57.1602 82.3008 c
57.1602 72.1602 l
h
70.9297 71.5898 m
70.9297 82.8594 l
70.9297 96.4805 68.9414 106.531 61.3398 113.871 c
54.9609 120.031 45.3984 122.801 33.8281 122.801 c
24.9883 122.801 14.6016 122.09 11.0508 121.48 c
9.25 121.18 8.21875 120.148 8.21875 118.109 c
8.21875 36.3398 l
8.21875 34.2383 9.26172 33.2695 11.0508 32.9805 c
14.6016 32.3711 24.9883 31.6484 33.8281 31.6484 c
45.5195 31.6484 55.1406 34.5117 61.5313 40.8086 c
69.0117 48.1719 70.9414 58.1211 70.9414 71.5898 c
f
357.051 109.32 m
348.16 109.32 l
346.84 109.32 345.691 110.41 345.691 111.719 c
345.691 121.828 l
345.691 123.148 346.84 124.238 348.16 124.238 c
357.051 124.238 l
358.379 124.238 359.449 123.148 359.449 121.828 c
359.449 111.719 l
359.449 110.41 358.379 109.32 357.051 109.32 c
f
345.93 89.8398 m
333.371 93.5 l
331.91 93.9297 331.031 95.0195 331.031 96.3398 c
331.031 97.6602 331.031 97.1094 331.031 97.1094 c
331.031 98.4414 332.051 99.5195 333.371 99.5195 c
356.75 99.5195 l
358.07 99.5195 359.16 98.4414 359.16 97.1211 c
359.16 35.0117 l
359.16 33.6914 358.07 32.5508 356.75 32.5508 c
348.328 32.5508 l
347.012 32.5508 345.93 33.6914 345.93 35.0117 c
345.93 89.832 l
f
374.539 117.48 m
373.09 117.91 372.191 119.02 372.191 120.328 c
372.191 121.641 372.191 121.102 372.191 121.102 c
372.191 122.422 373.23 123.512 374.539 123.512 c
397.91 123.512 l
399.18 123.512 400.262 122.469 400.262 121.16 c
400.262 95.6016 l
404.859 98.3516 410.039 100.352 415.621 100.352 c
434.02 100.352 440.539 89.3516 440.539 70.5391 c
440.539 61.5781 l
440.539 43.1797 431.762 31.6406 413.059 31.6406 c
405.602 31.6406 397.379 32.5703 389.922 34.2305 c
387.461 34.7813 387.031 35.4883 387.031 37.2305 c
387.031 113.82 l
374.539 117.469 l
374.539 117.48 l
h
427.32 70.5508 m
427.32 81.9102 425.539 89.2383 414.488 89.2383 c
409.84 89.2383 404.121 87.1602 400.262 85.2813 c
400.262 43.5586 l
403.441 43.1289 408.871 42.7813 413.059 42.7813 c
424.18 42.7813 427.32 50.1016 427.32 61.5898 c
427.32 70.5508 l
f
452.219 99.5195 m
450.891 99.5195 449.879 98.4414 449.879 97.1094 c
449.879 97.1094 449.879 97.6484 449.879 96.3398 c
449.879 95.0195 450.762 93.9219 452.219 93.5 c
464.289 89.8398 l
464.289 35.0195 l
464.289 33.6914 465.359 32.5586 466.629 32.5586 c
475.102 32.5586 l
476.422 32.5586 477.512 33.75 477.512 35.0195 c
477.512 84.3711 l
483.039 87.5 488.102 89.0586 494.102 89.0586 c
495.602 89.0586 496.57 89.9688 496.57 91.2813 c
496.57 98.0781 l
496.57 99.4688 495.609 100.371 494.102 100.371 c
488.988 100.371 483.211 99.1211 476.461 94.1992 c
476.352 97.1289 l
476.309 98.4492 475.25 99.5313 473.93 99.5313 c
452.211 99.5313 l
f
572.109 99.5195 m
570.781 99.5195 569.77 98.4414 569.77 97.1094 c
569.77 97.1094 569.77 97.6484 569.77 96.3398 c
569.77 95.0195 570.648 93.9219 572.109 93.5 c
584.18 89.8398 l
584.18 35.0195 l
584.18 33.6914 585.25 32.5586 586.52 32.5586 c
595 32.5586 l
596.32 32.5586 597.398 33.75 597.398 35.0195 c
597.398 84.3711 l
602.93 87.5 607.988 89.0586 613.988 89.0586 c
615.488 89.0586 616.461 89.9688 616.461 91.2813 c
616.461 98.0781 l
616.461 99.4688 615.5 100.371 613.988 100.371 c
608.879 100.371 603.102 99.1211 596.352 94.1992 c
596.238 97.1289 l
596.199 98.4492 595.141 99.5313 593.82 99.5313 c
572.102 99.5313 l
f
542.859 46.3789 m
538.23 43.8516 533.539 42.2891 528.609 42.2891 c
522.109 42.2891 518.75 44.2188 518.75 51.4883 c
518.75 52.4492 l
518.75 60.0898 521.879 63.4492 534.621 63.4492 c
542.859 63.4492 l
542.859 46.3789 l
h
556.082 42.1406 m
556.082 77.5781 l
556.082 92.3711 548.031 100.359 531.129 100.359 c
522.898 100.359 516.648 99.5195 511.77 98.6289 c
510.141 98.3203 509.359 97.5313 509.359 96.2188 c
509.359 90.2695 l
509.359 88.6484 510.449 88.2109 511.602 88.3008 c
512.191 88.3398 l
516.602 88.6484 523.371 89.25 531.129 89.25 c
539.359 89.25 542.859 86.5391 542.859 77.5898 c
542.859 72.5391 l
534.621 72.5391 l
513.461 72.5391 505.461 65.7383 505.461 52.3984 c
505.461 51.4414 l
505.461 35.8203 515.559 31.668 525.672 31.668 c
531.922 31.668 538.559 34.2188 543.969 37.6484 c
544.059 34.9688 l
544.121 33.6484 545.23 32.5703 546.559 32.5703 c
566.879 32.5703 l
568.199 32.5703 569.289 33.6406 569.289 34.9688 c
569.289 34.9688 569.289 34.25 569.289 35.5586 c
569.289 36.9492 568.23 38.2383 566.879 38.6914 c
556.09 42.168 l
f
625.691 10.6797 m
624.238 10.8203 623.191 12.0195 623.191 13.3086 c
623.191 13.9688 623.191 13.4297 623.191 14.0781 c
623.191 15.4102 624.211 16.5117 625.691 16.7109 c
643.121 19.1719 l
647.941 19.8516 650.551 21.4688 652.199 27.9688 c
653.281 32.2383 l
651.531 32.2383 l
647.98 32.2383 644.25 33.0898 641.852 41.3789 c
625.98 96.3906 l
625.539 97.8906 626.18 99.2188 628.078 99.2188 c
637.461 99.2188 l
638.5 99.2188 639.371 98.1719 639.629 97.1719 c
652.789 46.6094 l
653.34 44.3906 654 43.9688 654.781 43.9688 c
656.281 43.9688 l
670.109 97.2891 l
670.379 98.3281 671.301 99.2305 672.449 99.2305 c
681.941 99.2305 l
683.641 99.2305 684.23 97.6602 683.871 96.3984 c
682.891 92.8789 663.922 26.6602 663.922 26.6602 c
661.121 16.8711 658.352 14.0703 654.191 11.5391 c
650.129 9.03906 645.5 8.71875 636.012 9.67188 c
625.68 10.7109 l
f
289.719 69.9102 m
289.719 55.0586 l
289.719 46.5195 292.012 43.6406 301.859 43.6406 c
325.73 43.6406 l
326.809 43.6406 327.59 42.8008 327.59 41.7305 c
327.59 34.8711 l
327.59 33.6602 327.059 32.9297 325.789 32.7617 c
321.34 32.168 313.352 31.5586 302.641 31.5586 c
292.852 31.5586 285.898 32.7891 281.27 37.5586 c
277.629 41.3086 275.949 46.5508 275.949 55.0586 c
275.949 119.398 l
275.949 120.73 277.039 121.809 278.359 121.809 c
287.32 121.809 l
288.641 121.809 289.73 120.73 289.73 119.398 c
289.73 69.9102 l
f
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF

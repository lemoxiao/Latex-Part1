%!PS-Adobe-3.1 EPSF-3.0
%%Title: hmclogo-color.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: Melissa O'Neill
%%CreationDate: 4/27/03
%%BoundingBox: 0 0 296 62
%%HiResBoundingBox: 0 0 295.3277 61.6231
%%CropBox: 0 0 295.3277 61.6231
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 874 CVC)
%%CMYKCustomColor: 
%%RGBCustomColor: 0.5451 0.4039 0.1882 (PANTONE 874 CVC)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: hmclogo-mono.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -61.6231 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 61.6231 li
295.328 61.6231 li
295.328 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
295.001 61.6231 mo
295.001 42.6231 li
0 42.6231 li
0 61.6231 li
295.001 61.6231 li
false sop
/0 
<<
/Name (PANTONE 874 CVC)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ 0.998217 0.997663 0.996817 ]
[ 0.996433 0.995325 0.993633 ] [ 0.994649 0.992988 0.99045 ]
[ 0.992865 0.99065 0.987266 ] [ 0.991081 0.988312 0.984083 ]
[ 0.989297 0.985975 0.980899 ] [ 0.987513 0.983637 0.977716 ]
[ 0.985729 0.981299 0.974532 ] [ 0.983945 0.978962 0.971349 ]
[ 0.982161 0.976624 0.968165 ] [ 0.980377 0.974286 0.964982 ]
[ 0.978593 0.971949 0.961798 ] [ 0.976809 0.969611 0.958615 ]
[ 0.975026 0.967273 0.955431 ] [ 0.973242 0.964936 0.952248 ]
[ 0.971458 0.962598 0.949064 ] [ 0.969674 0.96026 0.94588 ]
[ 0.96789 0.957923 0.942697 ] [ 0.966106 0.955585 0.939513 ]
[ 0.964322 0.953248 0.93633 ] [ 0.962538 0.95091 0.933146 ]
[ 0.960754 0.948572 0.929963 ] [ 0.95897 0.946235 0.926779 ]
[ 0.957186 0.943897 0.923596 ] [ 0.955402 0.941559 0.920412 ]
[ 0.953618 0.939222 0.917229 ] [ 0.951835 0.936884 0.914045 ]
[ 0.950051 0.934546 0.910862 ] [ 0.948267 0.932209 0.907678 ]
[ 0.946483 0.929871 0.904495 ] [ 0.944699 0.927533 0.901311 ]
[ 0.942915 0.925196 0.898128 ] [ 0.941131 0.922858 0.894944 ]
[ 0.939347 0.92052 0.89176 ] [ 0.937563 0.918183 0.888577 ]
[ 0.935779 0.915845 0.885393 ] [ 0.933995 0.913508 0.88221 ]
[ 0.932211 0.91117 0.879026 ] [ 0.930428 0.908832 0.875843 ]
[ 0.928644 0.906495 0.872659 ] [ 0.92686 0.904157 0.869476 ]
[ 0.925076 0.901819 0.866292 ] [ 0.923292 0.899482 0.863109 ]
[ 0.921508 0.897144 0.859925 ] [ 0.919724 0.894806 0.856742 ]
[ 0.91794 0.892469 0.853558 ] [ 0.916156 0.890131 0.850375 ]
[ 0.914372 0.887793 0.847191 ] [ 0.912588 0.885456 0.844008 ]
[ 0.910804 0.883118 0.840824 ] [ 0.90902 0.88078 0.83764 ]
[ 0.907237 0.878443 0.834457 ] [ 0.905453 0.876105 0.831273 ]
[ 0.903669 0.873768 0.82809 ] [ 0.901885 0.87143 0.824906 ]
[ 0.900101 0.869092 0.821723 ] [ 0.898317 0.866755 0.818539 ]
[ 0.896533 0.864417 0.815356 ] [ 0.894749 0.862079 0.812172 ]
[ 0.892965 0.859742 0.808989 ] [ 0.891181 0.857404 0.805805 ]
[ 0.889397 0.855066 0.802622 ] [ 0.887613 0.852729 0.799438 ]
[ 0.88583 0.850391 0.796255 ] [ 0.884046 0.848053 0.793071 ]
[ 0.882262 0.845716 0.789888 ] [ 0.880478 0.843378 0.786704 ]
[ 0.878694 0.84104 0.78352 ] [ 0.87691 0.838703 0.780337 ]
[ 0.875126 0.836365 0.777153 ] [ 0.873342 0.834028 0.77397 ]
[ 0.871558 0.83169 0.770786 ] [ 0.869774 0.829352 0.767603 ]
[ 0.86799 0.827015 0.764419 ] [ 0.866206 0.824677 0.761236 ]
[ 0.864422 0.822339 0.758052 ] [ 0.862638 0.820002 0.754869 ]
[ 0.860855 0.817664 0.751685 ] [ 0.859071 0.815326 0.748502 ]
[ 0.857287 0.812989 0.745318 ] [ 0.855503 0.810651 0.742135 ]
[ 0.853719 0.808313 0.738951 ] [ 0.851935 0.805976 0.735768 ]
[ 0.850151 0.803638 0.732584 ] [ 0.848367 0.8013 0.7294 ]
[ 0.846583 0.798963 0.726217 ] [ 0.844799 0.796625 0.723033 ]
[ 0.843015 0.794288 0.71985 ] [ 0.841231 0.79195 0.716666 ]
[ 0.839448 0.789612 0.713483 ] [ 0.837664 0.787275 0.710299 ]
[ 0.83588 0.784937 0.707116 ] [ 0.834096 0.782599 0.703932 ]
[ 0.832312 0.780262 0.700749 ] [ 0.830528 0.777924 0.697565 ]
[ 0.828744 0.775586 0.694382 ] [ 0.82696 0.773249 0.691198 ]
[ 0.825176 0.770911 0.688015 ] [ 0.823392 0.768573 0.684831 ]
[ 0.821608 0.766236 0.681648 ] [ 0.819824 0.763898 0.678464 ]
[ 0.81804 0.76156 0.67528 ] [ 0.816257 0.759223 0.672097 ]
[ 0.814473 0.756885 0.668913 ] [ 0.812689 0.754548 0.66573 ]
[ 0.810905 0.75221 0.662546 ] [ 0.809121 0.749872 0.659363 ]
[ 0.807337 0.747535 0.656179 ] [ 0.805553 0.745197 0.652996 ]
[ 0.803769 0.742859 0.649812 ] [ 0.801985 0.740522 0.646629 ]
[ 0.800201 0.738184 0.643445 ] [ 0.798417 0.735846 0.640262 ]
[ 0.796633 0.733509 0.637078 ] [ 0.79485 0.731171 0.633895 ]
[ 0.793066 0.728833 0.630711 ] [ 0.791282 0.726496 0.627528 ]
[ 0.789498 0.724158 0.624344 ] [ 0.787714 0.72182 0.62116 ]
[ 0.78593 0.719483 0.617977 ] [ 0.784146 0.717145 0.614793 ]
[ 0.782362 0.714808 0.61161 ] [ 0.780578 0.71247 0.608426 ]
[ 0.778794 0.710132 0.605243 ] [ 0.77701 0.707795 0.602059 ]
[ 0.775226 0.705457 0.598876 ] [ 0.773442 0.703119 0.595692 ]
[ 0.771658 0.700782 0.592509 ] [ 0.769875 0.698444 0.589325 ]
[ 0.768091 0.696106 0.586142 ] [ 0.766307 0.693769 0.582958 ]
[ 0.764523 0.691431 0.579775 ] [ 0.762739 0.689093 0.576591 ]
[ 0.760955 0.686756 0.573408 ] [ 0.759171 0.684418 0.570224 ]
[ 0.757387 0.68208 0.56704 ] [ 0.755603 0.679743 0.563857 ]
[ 0.753819 0.677405 0.560673 ] [ 0.752035 0.675068 0.55749 ]
[ 0.750251 0.67273 0.554306 ] [ 0.748468 0.670392 0.551123 ]
[ 0.746684 0.668055 0.547939 ] [ 0.7449 0.665717 0.544756 ]
[ 0.743116 0.663379 0.541572 ] [ 0.741332 0.661042 0.538389 ]
[ 0.739548 0.658704 0.535205 ] [ 0.737764 0.656366 0.532022 ]
[ 0.73598 0.654029 0.528838 ] [ 0.734196 0.651691 0.525655 ]
[ 0.732412 0.649353 0.522471 ] [ 0.730628 0.647016 0.519288 ]
[ 0.728844 0.644678 0.516104 ] [ 0.72706 0.64234 0.512921 ]
[ 0.725277 0.640003 0.509737 ] [ 0.723493 0.637665 0.506553 ]
[ 0.721709 0.635328 0.50337 ] [ 0.719925 0.63299 0.500186 ]
[ 0.718141 0.630652 0.497003 ] [ 0.716357 0.628315 0.493819 ]
[ 0.714573 0.625977 0.490636 ] [ 0.712789 0.623639 0.487452 ]
[ 0.711005 0.621302 0.484269 ] [ 0.709221 0.618964 0.481085 ]
[ 0.707437 0.616626 0.477902 ] [ 0.705653 0.614289 0.474718 ]
[ 0.70387 0.611951 0.471535 ] [ 0.702086 0.609613 0.468351 ]
[ 0.700302 0.607276 0.465168 ] [ 0.698518 0.604938 0.461984 ]
[ 0.696734 0.6026 0.458801 ] [ 0.69495 0.600263 0.455617 ]
[ 0.693166 0.597925 0.452433 ] [ 0.691382 0.595588 0.44925 ]
[ 0.689598 0.59325 0.446066 ] [ 0.687814 0.590912 0.442883 ]
[ 0.68603 0.588575 0.439699 ] [ 0.684246 0.586237 0.436516 ]
[ 0.682462 0.583899 0.433332 ] [ 0.680678 0.581562 0.430149 ]
[ 0.678895 0.579224 0.426965 ] [ 0.677111 0.576886 0.423782 ]
[ 0.675327 0.574549 0.420598 ] [ 0.673543 0.572211 0.417415 ]
[ 0.671759 0.569873 0.414231 ] [ 0.669975 0.567536 0.411048 ]
[ 0.668191 0.565198 0.407864 ] [ 0.666407 0.56286 0.40468 ]
[ 0.664623 0.560523 0.401497 ] [ 0.662839 0.558185 0.398313 ]
[ 0.661055 0.555848 0.39513 ] [ 0.659271 0.55351 0.391946 ]
[ 0.657488 0.551172 0.388763 ] [ 0.655704 0.548835 0.385579 ]
[ 0.65392 0.546497 0.382396 ] [ 0.652136 0.544159 0.379212 ]
[ 0.650352 0.541822 0.376029 ] [ 0.648568 0.539484 0.372845 ]
[ 0.646784 0.537146 0.369662 ] [ 0.645 0.534809 0.366478 ]
[ 0.643216 0.532471 0.363295 ] [ 0.641432 0.530133 0.360111 ]
[ 0.639648 0.527796 0.356928 ] [ 0.637864 0.525458 0.353744 ]
[ 0.63608 0.52312 0.35056 ] [ 0.634297 0.520783 0.347377 ]
[ 0.632513 0.518445 0.344193 ] [ 0.630729 0.516108 0.34101 ]
[ 0.628945 0.51377 0.337826 ] [ 0.627161 0.511432 0.334643 ]
[ 0.625377 0.509095 0.331459 ] [ 0.623593 0.506757 0.328276 ]
[ 0.621809 0.504419 0.325092 ] [ 0.620025 0.502082 0.321909 ]
[ 0.618241 0.499744 0.318725 ] [ 0.616457 0.497406 0.315542 ]
[ 0.614673 0.495069 0.312358 ] [ 0.61289 0.492731 0.309175 ]
[ 0.611106 0.490393 0.305991 ] [ 0.609322 0.488056 0.302808 ]
[ 0.607538 0.485718 0.299624 ] [ 0.605754 0.48338 0.296441 ]
[ 0.60397 0.481043 0.293257 ] [ 0.602186 0.478705 0.290073 ]
[ 0.600402 0.476368 0.28689 ] [ 0.598618 0.47403 0.283706 ]
[ 0.596834 0.471692 0.280523 ] [ 0.59505 0.469355 0.277339 ]
[ 0.593266 0.467017 0.274156 ] [ 0.591482 0.464679 0.270972 ]
[ 0.589698 0.462342 0.267789 ] [ 0.587915 0.460004 0.264605 ]
[ 0.586131 0.457666 0.261422 ] [ 0.584347 0.455329 0.258238 ]
[ 0.582563 0.452991 0.255055 ] [ 0.580779 0.450653 0.251871 ]
[ 0.578995 0.448316 0.248688 ] [ 0.577211 0.445978 0.245504 ]
[ 0.575427 0.44364 0.242321 ] [ 0.573643 0.441303 0.239137 ]
[ 0.571859 0.438965 0.235953 ] [ 0.570075 0.436628 0.23277 ]
[ 0.568291 0.43429 0.229586 ] [ 0.566508 0.431952 0.226403 ]
[ 0.564724 0.429615 0.223219 ] [ 0.56294 0.427277 0.220036 ]
[ 0.561156 0.424939 0.216852 ] [ 0.559372 0.422602 0.213669 ]
[ 0.557588 0.420264 0.210485 ] [ 0.555804 0.417926 0.207302 ]
[ 0.55402 0.415589 0.204118 ] [ 0.552236 0.413251 0.200935 ]
[ 0.550452 0.410913 0.197751 ] [ 0.548668 0.408576 0.194568 ]
[ 0.546884 0.406238 0.191384 ] [ 0.5451 0.4039 0.1882 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
85.004 32.3609 mo
83.7081 30.8482 82.5425 29.379 81.1202 27.3042 cv
79.8272 25.4024 78.0596 22.4634 77.3272 21.167 cv
80.9478 19.6988 83.146 17.0206 83.146 13.5645 cv
83.146 11.0591 82.0254 9.11524 80.3013 8.03565 cv
78.6631 6.95508 76.2496 6.56641 73.5337 6.56641 cv
62.7847 6.56641 li
62.7847 7.1709 li
66.2408 7.64649 66.5865 8.16504 66.5865 12.8306 cv
66.5865 28.3848 li
66.5865 32.6934 66.2837 33.4385 63.316 33.9034 cv
60.9849 33.3121 60.4087 32.8248 59.0997 29.4766 cv
57.3716 25.0792 55.4712 19.5972 53.3565 14.1675 cv
50.1622 5.93555 li
49.6011 6.1084 li
40.7525 28.8301 li
39.2774 32.5909 38.7042 33.2139 36.5645 33.8028 cv
32.6734 33.2295 32.2706 32.4195 32.2706 26.9102 cv
32.2706 7.72999 li
32.2706 1.97266 32.6968 1.33252 37.1724 0.746094 cv
37.1724 0 li
23.3355 0 li
23.3355 0.746094 li
27.5943 1.33252 28.0206 1.97266 28.0206 7.72999 cv
28.0206 15.5665 li
9.33301 15.5665 li
9.33301 7.72999 li
9.33301 1.97266 9.75928 1.33252 13.9117 0.746094 cv
13.9117 0 li
0.0747071 0 li
0.0747071 0.746094 li
4.65674 1.33252 5.08301 1.97266 5.08301 7.72999 cv
5.08301 26.9102 li
5.08301 32.6524 4.65674 33.2901 0.288086 33.875 cv
0.288086 34.6211 li
14.1246 34.6211 li
14.1246 33.875 li
9.75928 33.2901 9.33301 32.6524 9.33301 26.9102 cv
9.33301 17.1797 li
28.0206 17.1797 li
28.0206 26.9102 li
28.0206 32.6524 27.5943 33.2901 22.9092 33.875 cv
22.9092 34.6211 li
37.066 34.6211 li
37.066 34.6172 li
45.0254 34.6172 li
45.0254 34.004 li
44.1192 33.7886 li
41.7881 33.271 41.4 32.7535 42.0474 30.1666 cv
42.4791 28.4419 43.5582 25.0792 44.0762 23.7422 cv
53.313 23.7422 li
54.565 27.0626 55.8165 30.4253 56.1187 31.46 cv
56.5079 32.7969 56.378 33.2281 54.8238 33.6158 cv
53.3995 34.004 li
53.3995 34.6172 li
62.6124 34.6172 li
63.7222 34.6172 li
73.8355 34.6172 li
73.8355 34.004 li
70.3008 33.5303 69.9561 33.0137 69.9561 28.3624 cv
69.9561 22.1177 li
71.8526 22.1177 li
73.3614 22.1177 74.1802 22.4195 74.9561 23.7115 cv
76.2496 25.878 77.7579 28.6441 79.4825 31.1075 cv
81.2496 33.6143 82.8013 34.4771 85.5655 34.7691 cv
86.9044 34.8941 87.6387 34.9356 88.1573 34.9356 cv
88.2007 34.4356 li
86.9044 34.1763 86.2134 33.7442 85.004 32.3609 cv
cp
44.5079 22.4415 mo
48.6084 11.4522 li
48.6949 11.4522 li
52.8384 22.4415 li
44.5079 22.4415 li
cp
71.982 21.254 mo
69.9561 21.254 li
69.9561 8.81299 li
69.9561 7.94922 70.0855 7.7334 70.3443 7.64649 cv
70.689 7.5171 71.2925 7.43018 72.6719 7.43018 cv
76.2496 7.43018 79.396 9.41797 79.396 14.1695 cv
79.396 16.5455 78.7496 18.6617 76.896 20.1304 cv
75.689 21.0376 74.0079 21.254 71.982 21.254 cv
0 0 0 rgb
f
132.392 27.7115 mo
131.398 29.7027 130.632 31.1749 129.903 31.9542 cv
128.937 32.9932 126.919 33.6856 124.442 33.6856 cv
122.4 33.6856 120.835 33.6856 119.923 32.9932 cv
119.184 32.4302 118.924 31.3912 118.924 28.9239 cv
118.924 20.6172 li
123.313 20.6172 li
125.181 20.6172 126.137 20.7042 126.745 21.2227 cv
127.353 21.6978 127.614 22.6055 128.049 24.2481 cv
128.674 24.2481 li
128.674 15.6856 li
128.049 15.6856 li
127.179 18.8843 127.049 19.3165 123.313 19.3165 cv
118.924 19.3165 li
118.924 8.79102 li
118.924 7.58448 119.011 7.49805 120.227 7.49805 cv
123.095 7.49805 li
126.397 7.49805 127.701 8.27393 128.34 9.00635 cv
128.937 9.69629 129.684 10.8165 130.298 12.9708 cv
130.923 12.8418 li
130.715 10.4288 130.507 7.28516 130.465 6.56055 cv
111.685 6.56055 li
111.685 6.56641 li
103.187 6.56641 li
103.187 7.17969 li
104.528 7.37549 li
106.427 7.72071 106.772 8.45411 105.995 11.3018 cv
105.175 14.3223 101.637 23.6417 99.2637 29.9844 cv
95.7686 21.398 92.4029 12.855 91.2808 9.70557 cv
90.8052 8.41114 91.0655 7.76416 92.6187 7.46192 cv
94.046 7.17969 li
94.046 6.56641 li
83.7022 6.56641 li
83.7022 7.17969 li
86.3008 7.65479 86.9073 8.17188 88.3365 11.7076 cv
91.4542 19.4249 94.608 27.1426 97.6319 35.2481 cv
98.251 35.2481 li
101.75 26.1509 106.025 15.0274 107.58 11.8799 cv
109.35 8.35938 109.716 7.75391 112.22 7.25879 cv
115.173 7.7212 115.486 8.42139 115.486 12.8077 cv
115.486 28.3609 li
115.486 33.0362 115.141 33.5557 111.252 34.0264 cv
111.252 34.6231 li
131.528 34.6231 li
131.874 33.4693 132.824 29.0533 133.04 27.8414 cv
132.392 27.7115 li
0 0 0 rgb
f
147.496 28.3545 mo
147.496 33.0123 147.841 33.5293 151.992 34.004 cv
151.992 34.6172 li
139.704 34.6172 li
139.704 34.004 li
143.653 33.5293 143.997 33.0123 143.997 28.3545 cv
143.997 23.4815 li
143.997 22.7916 143.825 22.274 142.881 20.6788 cv
141.852 18.9107 140.265 15.9351 137.59 11.1915 cv
135.777 8 135.562 7.65528 133.059 7.17969 cv
133.059 6.56641 li
143.267 6.56641 li
143.267 7.17969 li
141.252 7.61182 li
140.222 7.82764 140.049 8.1294 140.694 9.7251 cv
141.081 10.6739 144.904 17.6168 146.891 20.8843 cv
148.49 17.9063 151.257 12.6846 152.337 10.0088 cv
153.028 8.32569 152.684 7.76465 151.084 7.46241 cv
149.268 7.17969 li
149.268 6.56641 li
158.496 6.56641 li
158.496 7.17969 li
155.697 7.65528 155.353 8.34522 153.501 11.1915 cv
151.905 13.6495 150.349 16.625 148.36 20.3335 cv
147.539 21.8428 147.496 22.3174 147.496 23.0074 cv
147.496 28.3545 li
0 0 0 rgb
f
173.169 0 mo
186.298 27.6436 li
199.319 0 li
207.472 0 li
207.472 0.746094 li
202.836 1.38526 202.516 1.86475 202.676 7.72364 cv
203.155 26.898 li
203.315 32.8101 203.476 33.2359 208.164 33.875 cv
208.164 34.6211 li
194.25 34.6211 li
194.25 33.875 li
198.733 33.2359 198.894 32.8101 198.84 26.898 cv
198.626 4.9004 li
198.413 4.9004 li
184.964 34.0352 li
184.377 34.0352 li
171.515 5.80616 li
171.409 5.80616 li
170.931 20.5064 li
170.72 26.0459 170.931 28.9751 171.194 30.626 cv
171.515 32.5967 172.796 33.3423 176.265 33.875 cv
176.265 34.6211 li
163.747 34.6211 li
163.747 33.875 li
166.73 33.3956 167.796 32.5967 168.329 30.626 cv
168.756 28.9751 169.182 25.7793 169.448 20.5064 cv
169.981 9.32129 li
170.298 2.2378 169.981 1.38526 164.973 0.746094 cv
164.973 0 li
173.169 0 li
0 0 0 rgb
f
219.976 6.56641 mo
219.976 7.17969 li
216.527 7.6543 216.183 8.17188 216.183 12.8292 cv
216.183 21.9703 li
216.183 25.6353 216.656 28.3951 217.993 30.3355 cv
219.328 32.2325 221.354 33.3106 224.371 33.3106 cv
227.172 33.3106 229.369 32.0171 230.749 29.9473 cv
232.171 27.7911 232.688 23.9966 232.688 20.375 cv
232.688 18.003 li
232.688 13.4756 232.473 11.147 232.214 9.81055 cv
231.913 8.30127 230.749 7.5254 227.905 7.17969 cv
227.905 6.56641 li
238.314 6.56641 li
238.314 7.17969 li
235.938 7.48194 234.814 8.30127 234.513 9.81055 cv
234.253 11.147 233.864 13.4756 233.864 18.0464 cv
233.864 20.9351 li
233.864 25.9371 233.081 29.4732 230.577 32.1465 cv
228.724 34.129 225.62 35.2481 222.906 35.2481 cv
220.708 35.2481 217.993 34.6885 216.011 33.0518 cv
213.776 31.1978 212.745 28.2657 212.745 23.3501 cv
212.745 12.8292 li
212.745 8.17188 212.399 7.6543 208.771 7.17969 cv
208.771 6.56641 li
219.976 6.56641 li
0 0 0 rgb
f
246.087 8.81153 mo
246.087 7.94874 246.218 7.77588 246.477 7.64649 cv
246.823 7.5171 247.429 7.43018 249.636 7.43018 cv
253.141 7.43018 255.563 7.90528 257.251 8.81153 cv
261.578 11.1421 262.53 15.8892 262.53 20.4639 cv
262.53 26.9371 259.068 33.6265 249.765 33.6265 cv
246.649 33.6265 246.087 32.9356 246.087 29.0948 cv
246.087 8.81153 li
cp
238.935 6.56641 mo
238.935 7.1709 li
242.304 7.64649 242.649 8.16456 242.649 12.8252 cv
242.649 28.3614 li
242.649 33.022 242.304 33.5401 238.589 34.0152 cv
238.589 34.6197 li
248.294 34.6197 li
258.463 34.6197 266.644 30.001 266.644 19.3418 cv
266.644 15.3716 265.042 12.2212 262.877 10.1929 cv
260.106 7.60352 255.953 6.56641 250.804 6.56641 cv
238.935 6.56641 li
0 0 0 rgb
f
274.772 8.81153 mo
274.772 7.94874 274.902 7.77588 275.161 7.64649 cv
275.508 7.5171 276.113 7.43018 278.32 7.43018 cv
281.825 7.43018 284.248 7.90528 285.936 8.81153 cv
290.263 11.1421 291.215 15.8892 291.215 20.4639 cv
291.215 26.9371 287.753 33.6265 278.45 33.6265 cv
275.335 33.6265 274.772 32.9356 274.772 29.0948 cv
274.772 8.81153 li
cp
267.619 6.56641 mo
267.619 7.1709 li
270.989 7.64649 271.335 8.16456 271.335 12.8252 cv
271.335 28.3614 li
271.335 33.022 270.989 33.5401 267.273 34.0152 cv
267.273 34.6197 li
276.98 34.6197 li
287.147 34.6197 295.328 30.001 295.328 19.3418 cv
295.328 15.3716 293.727 12.2212 291.562 10.1929 cv
288.792 7.60352 284.638 6.56641 279.489 6.56641 cv
267.619 6.56641 li
0 0 0 rgb
f
51.9429 49.7872 mo
51.4126 47.7735 50.3863 47.2452 49.2105 47.2452 cv
47.2232 47.2452 45.9976 49.3907 45.9976 51.7666 cv
45.9976 54.8038 47.4878 56.751 49.1939 56.751 cv
50.6343 56.751 51.4625 55.8262 52.3072 54.0118 cv
53.0357 54.127 li
52.8204 55.1006 52.4229 56.5206 52.1416 57.1524 cv
51.7276 57.2696 50.2369 57.6202 49.1275 57.6202 cv
44.6695 57.6202 42.9097 54.8038 42.9097 52.1465 cv
42.9097 48.7305 45.5992 46.376 49.4253 46.376 cv
50.7999 46.376 51.9097 46.711 52.3731 46.7793 cv
52.5059 47.6905 52.5718 48.42 52.6714 49.6876 cv
51.9429 49.7872 li
1 1 1 rgb
f
82.4082 47.2452 mo
83.8301 47.2452 85.0206 49.0772 85.0206 52.3946 cv
85.0206 55.3809 84.2437 56.751 82.8218 56.751 cv
81.2017 56.751 80.0772 54.5723 80.0772 51.586 cv
80.0772 48.6973 81.1353 47.2452 82.4082 47.2452 cv
cp
82.7388 46.376 mo
78.7823 46.376 76.9893 49.4727 76.9893 52.1465 cv
76.9893 55.1836 79.1641 57.6202 82.5079 57.6202 cv
85.6846 57.6202 88.1084 55.3985 88.1084 51.8663 cv
88.1084 48.5987 85.7676 46.376 82.7388 46.376 cv
1 1 1 rgb
f
116.57 54.9336 mo
116.57 55.792 116.603 56.2042 116.901 56.3526 cv
117.166 56.4844 117.547 56.501 118.06 56.501 cv
118.59 56.501 119.302 56.4512 119.65 56.0225 cv
119.915 55.709 120.196 55.2627 120.461 54.3887 cv
121.173 54.504 li
121.074 55.1309 120.726 56.8516 120.577 57.3702 cv
112.366 57.3702 li
112.366 56.7188 li
113.625 56.6182 113.757 56.501 113.757 54.7188 cv
113.757 49.2735 li
113.757 47.4913 113.625 47.375 112.515 47.2764 cv
112.515 46.626 li
117.895 46.626 li
117.895 47.2764 li
116.702 47.375 116.57 47.4913 116.57 49.2735 cv
116.57 54.9336 li
1 1 1 rgb
f
148.993 54.9336 mo
148.993 55.792 149.026 56.2042 149.325 56.3526 cv
149.589 56.4844 149.97 56.501 150.484 56.501 cv
151.014 56.501 151.726 56.4512 152.073 56.0225 cv
152.338 55.709 152.62 55.2627 152.885 54.3887 cv
153.597 54.504 li
153.498 55.1309 153.15 56.8516 153.001 57.3702 cv
144.79 57.3702 li
144.79 56.7188 li
146.048 56.6182 146.181 56.501 146.181 54.7188 cv
146.181 49.2735 li
146.181 47.4913 146.048 47.375 144.939 47.2764 cv
144.939 46.626 li
150.318 46.626 li
150.318 47.2764 li
149.126 47.375 148.993 47.4913 148.993 49.2735 cv
148.993 54.9336 li
1 1 1 rgb
f
178.604 49.2764 mo
178.604 47.4913 178.472 47.375 177.362 47.2764 cv
177.362 46.626 li
185.2 46.626 li
185.218 46.9102 185.3 48.1231 185.383 49.3594 cv
184.653 49.4092 li
184.49 48.6006 184.311 48.1387 184.049 47.875 cv
183.786 47.5938 183.239 47.4952 182.361 47.4952 cv
182.079 47.4952 li
181.45 47.4952 181.417 47.4952 181.417 48.0723 cv
181.417 51.251 li
182.245 51.251 li
183.67 51.251 183.72 51.1524 183.886 49.9043 cv
184.604 49.9043 li
184.604 53.796 li
183.886 53.796 li
183.72 52.3438 183.67 52.2452 182.245 52.2452 cv
181.417 52.2452 li
181.417 54.9336 li
181.417 55.792 181.45 56.2042 181.748 56.3526 cv
182.013 56.4844 182.395 56.501 182.908 56.501 cv
183.571 56.501 184.294 56.4024 184.653 56.0059 cv
184.936 55.709 185.218 55.0987 185.465 54.3077 cv
186.194 54.4219 li
186.111 55.2305 185.764 56.919 185.614 57.3702 cv
177.196 57.3702 li
177.196 56.7188 li
178.472 56.6182 178.604 56.501 178.604 54.7198 cv
178.604 49.2764 li
1 1 1 rgb
f
219.366 49.8663 mo
218.87 47.6905 217.497 47.2452 216.426 47.2452 cv
214.681 47.2452 213.231 48.9756 213.231 51.794 cv
213.231 54.3555 214.318 56.751 216.59 56.751 cv
217.002 56.751 217.266 56.6192 217.266 55.8418 cv
217.266 54.2559 li
217.266 53.1504 217.2 53.0342 215.471 52.9024 cv
215.471 52.1563 li
220.989 52.1563 li
220.989 52.9024 li
220.145 53.0508 220.078 53.1006 220.078 54.2559 cv
220.078 55.4463 li
220.078 56.0411 220.095 56.5694 220.178 56.9512 cv
219.151 57.2364 217.812 57.6202 216.442 57.6202 cv
212.501 57.6202 210.144 55.4795 210.144 52.1075 cv
210.144 48.3331 213.165 46.376 216.673 46.376 cv
217.944 46.376 219.251 46.6602 219.829 46.7793 cv
219.88 47.3438 219.962 48.2071 220.095 49.8165 cv
219.366 49.8663 li
1 1 1 rgb
f
246.333 49.2764 mo
246.333 47.4913 246.2 47.375 245.091 47.2764 cv
245.091 46.626 li
252.929 46.626 li
252.946 46.9102 253.028 48.1231 253.111 49.3594 cv
252.383 49.4092 li
252.219 48.6006 252.039 48.1387 251.777 47.875 cv
251.515 47.5938 250.969 47.4952 250.09 47.4952 cv
249.809 47.4952 li
249.179 47.4952 249.146 47.4952 249.146 48.0723 cv
249.146 51.251 li
249.974 51.251 li
251.398 51.251 251.448 51.1524 251.614 49.9043 cv
252.333 49.9043 li
252.333 53.796 li
251.614 53.796 li
251.448 52.3438 251.398 52.2452 249.974 52.2452 cv
249.146 52.2452 li
249.146 54.9336 li
249.146 55.792 249.179 56.2042 249.478 56.3526 cv
249.742 56.4844 250.123 56.501 250.637 56.501 cv
251.3 56.501 252.023 56.4024 252.383 56.0059 cv
252.664 55.709 252.946 55.0987 253.194 54.3077 cv
253.923 54.4219 li
253.84 55.2305 253.492 56.919 253.344 57.3702 cv
244.926 57.3702 li
244.926 56.7188 li
246.2 56.6182 246.333 56.501 246.333 54.7198 cv
246.333 49.2764 li
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 10.0
%%For: (Melissa O'Neill) (Harvey Mudd College)
%%Title: (hmclogo-color.eps)
%%CreationDate: 4/27/03 1:44 PM
%AI9_DataStream
%Gb!<tlZ-RGOXBo-I#%[@&LF&-[;Z@5-Vadt<GM9%,ot*N42TC=TNSm;Nd7TI=gljVJ+.lS\?*YT10+&?bY4't>e,DR,*>E,!f=kA
%IWg&;iU6++h=miAJ,A?QGe\;Km^unMhW:N)rTmmp^Y(hhb8`V,JeW=g3(@EC+6bag=)4>`?[]H?h`ZDdE.>9FHp#$U\USl%jmMd'
%o'4QMcej1rs8M/,s0eZ:s6riXrc7bIep,t7m7uNps)J(pc2KBn)uJI5YJSR)gYGcnra2GA(Vft;MhfKbf+h6_H.i0j$uGcA\!Q"@
%/!a:q\V%kMF`[05n`f$'l2EtQ4'_4PjjV]XiD.Q9DY!)_:\T@pg%oJJnE],,0#>Pb+ZBfEflqA;Dt\,;+)Wa(G2\fB-a`pIZ-rWp
%*WHoEYO8Q25.o^$?(&6QbH="fL\)Verc\>6<:O$jRYfL+[<MASD&cl1IIcK<^A@En/gnCqqq]q<[H'8RS5+ce\Qb)\`Kg9q828VD
%I#Me6lK!GB\GV<!WkZ/DLZI)*Qg-f_)8CN@HLkS&ILcg8p=VKS<,n%mGBM,YBP$On1+ED%Eh(OO'`.OL]o4Tm@S@Lo&616n3dnO<
%lWpD5g;JJs6g-YII/*;N+pLaJ\P'p8WcEFcpf&]qmlQutdG'm%hiPPJir8(WV_f5%C'#;._,`m<7iiab,Ua7TB(tSkLWd<u#:hoP
%Hf:pFfcD+8'[8$4%,^F/Np;=_Hdb"N]Bf?`rK@`H4O&>sg9po%^=e!c9pr`0^\\P+X:mj0lJ):797^/YWIe%JmhKHTq>T43LRTY'
%[bW?3s*XZZ7q02Y&&9D?eaYnkG=J',LoLA\mXY"\^G,H_UY,9aJ_H[LGrG9efB6ha9$(0m;5h65XnfWDi-tnS0h$Pt^O:TQq6['*
%E_G2u'&10)U<Y^s9)Q]s;R,f9cs?O`>jq^hbMB?TYHI>cmN;HSbkq858uCss_pc*Hs&nN^Yn]A",OfV8h!?,3H[#Ef\O;rV.fT;D
%mJ_jh;JX%X\\pV$H,BSRJ_s]rI(t/_C:s?BT)Wht(]EUA&%<@A5O9I5'jLM%X7uM'hq\6lo_p&'j05QcHjh#qs(>TnAa=P@#-<"!
%5fihI.9>@,L5%b>OncM&Pcl.2^V@M[V'nEEkj-FdqhK+`=&0Q3fgb\ChgSk1QGTaOW@I/u[mM_n]?BaeG4mmks"!Jdd]:N`Wc%8n
%Q+anYHZjmsOf@X6B;\b>n#G1#gj^ulotU;qD=5;gkn_%KqsqIeY/=@U3;W4EOkH;^9g?*uUoMGlhVDJombdHHmjlRo7u)V[G.Tha
%Hh<)gs82$)Rl@P.SA.(2F8G%[9mMr[Uc7g<GiR\k2ti5VZb1bYqXs1Gf4V9_?_=t`YOh)P3kc*-rG2/]^,E0]o/Gj9cd0q`c;2b^
%cHCJs3`"r/4Il:iGAbaOq/Z2km.K'-g"G'Cfu[AWb@g&jSqStMk0E=]3Eo89SA%0M5<V(k4ZteWVti0?`m\nl:Yi!525eXFad\LG
%-g)ji-`8=>-flVGUm$$9:Afr1Yp\[E.<!ApEaI&6BfRW=jH<+dTrQ&21lEeUIZn.%o6cj"o1:Pp+6A_s%bYK]D)QZ2DpmrnT$Gbu
%3_:XZPYt0uq;d]5-8"a^Hl^Pn=ZhZkZ,@V\ebLBbkb=%`/k=kpGTG)I=Z?j<TnFC`L`oa:ksAC`@I\:6CObcur2DpN`FkfjoYGnC
%]_/.:ei3$)4*P?*e=F*Im1u$nFM[dQ/o=mh(Al+c[cdA.T%Xi^CpqGT)m$No>&3J6hO)pWgmjd2F(1$K-CLn$NAo-bA'Au#e:Cli
%==g@CA_9oX]YpWZ[T)%?WH7\23EgSjqsO*MaonM)eG6K`o'OiN^7-7CO%2[RqQKk0rcWT?P$*LMa^k_$Er:i&r.olE1<LjSPGO01
%a[9>lWuZ>1s5E56lag[kK2<RfF,gWnr`cB!5l-u$rV[9)r3uOcJ$6Z&melM)]0H56Z?o7>n%W:\bjLes2Ja3&CP-m91]0$)mi>7+
%;dGQ#7jM7;D9>tQ%9Gr%7fXW?Ti=Sk]AK4lbJ+(a4"eGklEZroks9+9Vk&P+@64KoO?:`JQC[]h&.udnQ(k^O?5*Z\OT6jFF9@UW
%o_96fZ$i*dS4t="02ibKC0*_CAaFE8:%!JW(4U]'>)!Y.:'U:0L\C97m=$*YIZIq1s0G2F*s2E4a&L_S%=g>onc.?%pAVkSkN>4)
%T+-3p2Y&LALXV%EX$8i"!RO'r!Z_$NjRb[/`d#ICX+(d%B^9?PQdH="r@P,NMQF;<J[8L\k,JUfD+b`Xrn"s&<."62QiDa$ht<*j
%].Z^.g\nP=WXXea#r6t<@75Z[X'\[m$2qT*MM+%7EtSABMtgPr,`a/G]dcqCbGpAGcUF@Z"#>btpKYYf=[!YLn%"7Rrpg[l&cH#N
%Z'Du4LjZBe?)a;caCd"GCn,an^VDll-4/<](Qr\ge1cF]F!:A9'LF216Lqf=KKdV6jEjfrI]eogA1,OcE4HrHPY\+YTV^58:Se2u
%.4)>rV$+"O-,`QT"L'>O`0t17dR67:`,(7%$4/s)X_FC7$".%0.34*FYV)`)N^<eL(D8c+h9KhlA@aAIVc!TC;JX^Y;?GL8&lPW*
%!n`_M>,P7"fT]9C/]V<s+5#[4nP^SG+r4A24r$s5=qsq-7j/V@<?WZ1'N,6@'ro,XNF`:M%R<s_,cQ[RWf.#A10EsFAJ?hbWB:Qh
%1('DlaH**Pr.PbBCPm67As-s(I+hI]Q"uJ(\OPd2f-'C"NS%+26.Y.^i_`AM;JOYgR0-A8<7!Oo(r[2n.Ai>g@LCa%'1t_Cq:7kO
%b#GQ<V!/$=O>`A>OEESFk#AKLf&`.WWEb(Wb6cQp0a3rp>Z7(k[nj]QS=<N4codS/d_7?31f*5%`37?5bu;/"p$6WboMeKf5HNA*
%dTi-j&9=2N!WA1QaiRelJ^t!ilFC:)XU?W3F28&a(DOaLEXIq<2sZ3Rn0q`iU+\BFci19f1KXSf#K,%DQdG^pq?K.l`C?VMNHk[h
%jC=">]9iXqU55"1\4t4">1lGHe$`4><&FSV/3fURQhC5bqM$249t*0=@'/:tM8Y//p*3jW^E8'8IkM;iC[JL;kB8nGqX:F;#@K@5
%/\^)%p:(!Iqfd9>\'sXaJk^CNG38dSY;8?:IOY855?N-p"2<O"2>HllVK&d=Oti?E[FI>Aq^H%%jL*IGk57N5h"L-kL6"+[<ZM%b
%IW*9bh#SC_kL<bG:Z"OD^E^(EmT0=t_D';HAc"WW?I?HTV.N0J<[U#Y&S%'FpaDB>l@8I==cGl#9]DNp5!_tIeQ:5A'QmHoE4a!!
%ObCt]c`J7W"7)(-#OD>Uh"UfN,]M"r/`.'&b_%rg4"%LXI7OTk7(:AsbTkq_*KnT5o"4;4MY9X8[rZ*'_aAMedUd:><r-C00qPk\
%q>T$X1%Y7^qRY)`LNNHFEHl]#lmsNb*ZWU\L\1Fo[QgX9%dB3Flfb$bn70&md/%iTYAa*XFppRC5&G#%a(;+/%]qAhpj/lWB]m@c
%hYl7l*8eThCO\\?CWk7\Y-qr\h[/^m3r0PkDo-YO4p;s@SafJUf>%:\Eu9I?p\d;urRfA"f"7=XFsh(aW-^b-"s5'"a/BuI?1*r]
%S[^/2E\.knOi57L=r1Ye&4][u\1ScOI5,=`<Nn&g#-'Ys-VUqBpT->t5/W\`\8u)c(1lg\X\#PXaGhqbLoYm-U'R;GFtQbk@GHa9
%gA+q$pq`ddC/)t35_&FNNUMnKP"W@[/_6aTe02\d3k"(='It2jK.kDrAs5_>?\b9kN:.C%1S>^8mrt&0jG0Xu.QZU6ePD-P8%R?c
%$cgAT6!HB&eLe&VhfM1hiWpTlAL_4U=e2s[Z:ZB';#BLT%YX-F<R[Uu_\*)T0\Z,d*<@G=SN0G:*Q:W"_RD"&m-iGtG6Q`#c=el[
%Z)t^@oTmUi9Sg9ZF2B5'ZgaJXXleHPiFZPLTO]R2D5[f_<1TD:I2V\3C>2"3eTQ$^Y]AT@(MY(nnuuMoU%2B2YJTh8j>r]$%+Fi@
%%`]&JB[>36G.!@<UIZE]bRT@Qbc9^</>46pBf^L;,f#1YZ*tK'/_>%],<"[GVd!I6]V0/8abGQaeS[u2[B[l=hO*E#1ois.NKk^:
%L"UI)j*HY)kK[&L)khVMWYh)59OO]!<m:fj@go,3+Mb'\&D<U8!ugEd9\E7-bbPQC;X4fr4oT/Lpq9OPQ7@&k,1EK\qe&?/RSK(n
%l'nBG^`6rk[V0#[dLE]-L3b[No57#8)Ja$?$A``rR+;mM=6GPgfJVniF_/gLWZL=I<=\;a9g]D@f<71GXW1\*4B6<!Wr3-a&ZsoG
%[Tp"@>Si9])S_R"!Usm0'0YbriC&(G)HBu6bs;]]1DpGg+Tnrb3hWN%E$3*(Sm*)-<>eZ36O(2q!#$\IXnLm>S+Grso3BCP(X6X^
%fimFX!BV/:i.)8@_BC:8VAt,o"TX[oDFYK!arKa)>u&2Y3q@^cMNF(Sj.!YTTL5'<)%"qEht_!;JXLDX$Uj2+;))V`9QSZ>c)-lD
%P-Q8]:g++_FkD*81dFs196lkI!AOV[Q-4Jq2sKl_f/Sf.r7#:7'HQ>$/jm]kj`>RGK5OlE`Q%^'NEDTqZ!&Y*N))(2'uQbr[3n\N
%JdBQ1S9q<nb<XcqrGs_b?%Xab88c\5go$>S'bPJm11WA-AKZR>C"B%2.b1Z&VRW2A0o;%Db?tf`]@Mm_6nepVB3#a*N_rnub6Ah/
%e%#VcK!Vao`@]J+6XN,^@jGPqD4&9rLKQc@Bp,I#&hu+sL11h@DXCUH-&iNSZWaH@bsGQgMQ5];^,a=+I+0IJA7q3;!kB'+NRu.O
%0+fmY+bqRH+em$5aMoK-gWs-X-=bk^P-D$D"pR(Rcbh^m`FJf&:Y$BhY9m#8eNlp[\cTd*o3u3(9SbYH0&>0$Xim3!'$W1ZaY^HL
%BW]o^JK&Fg6KQc*2m/\jHbd,\)qW(Nnncmio$@9'\Fs&&F,)'E>nM.n'Cfi[_`V#tC@#$rCLcb0FNE7@jjs-S/N+RGC8+cL)]QK%
%40t'Pk'(rN2thI72]:Og=P%"tbIX".9kuJP6257Rf-Y.:R5X?33n+R?q1)JXlH`IPD2M'U0[8s!mF%t71n^eM&>@h8=:=_."neN-
%U>doi0!3'b3c`#2hsXTF%DUpcM5?/6(\(F\QgTHqs7,72qJM@e]'Hu?rPN8<cTs/0cDK;?q=bO)^?.sJL;[B=oUIY>?lqT<PEW2]
%^fp.XkK)R6K.)/Y:8)k=WbCEODD;N"bJg03R"@:h1bPdHL+sa$<5a\.MQ/Y$OIq(8FskAo;BH(qWO$b#p9'$(f?n&#o@O+V;1i.J
%YaH8f+OTg$A?cJCkmgY0q(QW"iMULm:""+_iFsf=!eNZDASoZeYPD.k&mUW2RAh_,&85\"r:,h?=PG_!>_M$K9IC"dQk$`q?mJ&4
%2(8]'jSKbS-E]i%!,+hbM\&<FO+KBp*HX#gj@d.go`p0uYF@`Z)b<1jAi.q[$^jsjr1Bj<i^)3]<s>]0`:'-Y\=I"E`DH1@#_HIp
%JQg<V"5)2bmrqJJbcQ]TLb"\p5[*d=!4JL^bh&2jpNLNf@F>+>JZUG1NnbU(hL)UId",1J6Ll&d$MO"@[5s'5:LVU.cRL^PM']*f
%VjXS/--*)\AZrNW+YP05C0j$?eJPu=j53CCV%0nkJnXDhPRDSVK3e+i:18<t`DnqVY6Gh[jr#I1Q%HOl6$\0';mD6f[?*^Wdn#kP
%X0PXKY#'$%FrjUmd\ef.\=hMnF_]/!,6%dMID,<TlU-.`Ii8%+AOX`b;0b+*du;TEdVpY:?_JFXB-'E=NWJH1f>R^on6E_pmd4f7
%eIQ9Jk#@ik#c7S#XP7aFce>"+FfdZ$c!6l?#e0$+>\Rbf%s-bB8hDs1]Z%<fh;$'PQ6!!-`TBWJa9I,uU"a4=4]',!E6]GqdB(ui
%T'LsX1l-X2C2B>P9lF-Zqm#DkB&FhlE(G$i(p/#.q0W"$g5#=L!S)0T_&O<-/eNQ7"4qr\2!/#e[F&nWAP)dNrSK6B^W31Wp/bOh
%oE'iJAfG"6loo,LoA.+OMFIlC&^QOSna$eCO'1P$2sr*R!YTBs0Do/I:nOm@b]PGF5M"!7Tl)nmes3WA`-#$Nd^BtIj^!,=*k'M=
%UpVf@W/P!hD"iGs4]PUoM]R#=%VKF_6dU#L_2W7'/k1t<aP[E[7E7.aWk=#Kk=Ve0!-i<:-#WDQ]V2<3.RIp';4tq;)AhH.$1kL#
%8<')hN@#Pm!Bu1oZ3T-`2U;6jq:NKI*8%qf7XXUQ="Q5u6h*j3kd`3"eQTGiTkhOi/_ai@)XP<DMXoQ[k>XZaN>/L09s(Kd/7YI#
%]=8n:K4D9Yo.3?<).KBV-S_?[:GQBkLs"+ECYdKp/8SDa/QKscM5k8,KIWsFEKG&MPmO*?NB6BK2?UGI'Npl::2st6gjfa]e7fpe
%1+%sR8M`a<C9"[ZCI?^B<EaKReT2U/Z:;U:aFsS=Mb4^7RCUOr>CN/RgrJL<jtn)iic!A/heFXk%;HsraTQ9=Ua^-7>L/_l+42"Q
%(!A`45Gejt$=bs@*ZJ7%QAfak9^bqDPJ..i3K)5("R<PE%D7a3+kj.MiC[qVNN]g$QmYYp0Q6X-MDYjj"T#R7C:B_KXT`&d%T^fZ
%p#G$jot6ud5ihOF3>%frp3o\b4]??Q*l0SFJ'+)J`T;l1rCu0E?@C8X\%/M$>ToG`O8^kX^L<m*XYI"e+*[Ggm),D-W4M)"Sa`4>
%(0AqLfIp<JIimDgOdfZ0Zo`@)\00=$K3c\T?X3ui!ue$(+kTaq4C0PiRA91?8D9Wbj^uR!+F<hciC&eI6m^RG-eUPg9KLJL^k0'X
%RiL/V3&TsXn>NC]I>']h$cauH?8a;VcXL@GEl<gn9Y0f\XL7A""0kK2Y#=P-lJ.AuFH$(,C:(fB(m%`+cB<&b12Zo3G4a8MFVVp)
%1VNYGY-c)YX,)_haiJn!q;.6V.0Z_C,2GPP<k=YQr3PH!Z;qes&DILqLGcd'U4;m5jY%,%pgb6gq93;VRYY!SX^Jn$<Y9JE#0%>a
%:%6\=_+h2RohPi$+u?S"*G3d*6fKPf-k_[)AZNE]K-I*I8A2lHbA#mT_[=^%Vek(kIU3=r.bSAIWO+#o)-+hALhP>N:D?^_$D5'U
%&LCT-U"*NEs-O:5aDT&=7WZjlXC*M%%DtD%6u?36)4M8#P,-tmd4_%)LoP0$9e1]!2V%X<&[dn\lGFf@,is2M?4DmGj"aCfEL`$K
%DH>;eLkREOKMmLYq.^gQEEQSk_Vgo>obA'\JI@&#$VsbH-PN3Vl9nPs>%(QBWD1;\7T!Y1*5jC0R[@Cb_)bTOC5W[U)mH5nQ;_YB
%aak!CCKHL47-5]Kf-*J)e[Mm1,-rsTSJP$IQeX]@b[D+ea?B)/UT,\KbfhG>bClW;CeF3E9'6hkB=m/$m?W[(F",H[S![.k!4ueT
%(53Ka/7rAT4Nb/n0Na!)A7JX[3mLC^%'#O:ML+*TZVQf.`*?HO@LV7XD.oGJ+AeUWb*o>D'$SCa2jW7jSN1gXI>FkB#O9MXChr$j
%_#2CsbZZXfarNlW#DNJI4%T)ZXIHbQ:!S9P_Oe@<V?/%lr)rd\*tt9$CS#1]VDcg?TA!!)N1-VIB9^]Lc7#6"';t\;RlJqG>A'3r
%[`5=*fc%'VajulVZ`S5J9t*h5J+@oi^\l:SnJCXHDf2d#9OBWS&RSJW3L<A-5C+_-8AlgBdE[gq\XUh=@&V_=$hkLmp>.h@,n<F*
%q!1Ce5M!p5+\Xf^cUgKi3@SYsFh:Rdd">Mm]r'[L`$)U@Oh0a_B*BCXboYV56*_@M#U''$O[NXtghPaMX@@Pq]0`R8!GfXO2:YOC
%0K\ne+XGOcfe-8;',-WRFltA4.#A*:s,=UdiS60S'ss0M],d4N^eU2shhZVk<"^CN6Du;,aG>cH86AgRR)jLM'sVfD(`VuNPV&\Q
%@FuDE$i&gf=VL!9/BGmFX-?OU)oO7,hZ8k.7FB!-6I^'*g__Ss,qH;>hOeIB+h//=4\s(kGtd4p9IL<H/(bKNH%;uOaYqXA?o1Vb
%1tGA&fE1s8*0%&Z43a1e`s[?^E!Y<7@,N8p,c5^Z=_>'K$@_`T<!SpCe:.hOF\L.'`l^%dj:&dFl:<JPW^,k-,UYK_mK3O@W.Q5_
%k]Gf(+pSLHRE>Ss7Cj0f#`r:"$8dX$_k:0\Xpn,M<-jE)H=U^R;O'29m61$Ej_EZ9/k'O/$kSY`>j<L#Q)YZ=;NNDi&A4TU.rBs&
%!mFo!4E9ma\_bMMZeMnK2P05S#Xn#5@"Zo6o6$d+Td1"#iFWL9"aDbb<=)!IU*qW&=_LhX-p&CXcNLKVYnIRb?FVs](spqYB:,o,
%,r5mW9-P:^HE*\Cc8*,Unm[Ye\>YA>hGc5YfZ;]kfA$t69Z'h'gmO).$h\9i<!'9`1Cp9TiQhe&@C-I+O>deB\4@98d:%LS8aE&Z
%*7F=F*/&8pMPm3I7%>Ee%]TW$cgVDH0)%V50Q'Y<-c%_6f>YY11+@bUA3n1fMDG9hW?b7[p66E5M6P%3<n1@5(lfBF'MZVkiTY'R
%76j7qgY.pBE@r]t(]dt=ijp,&]B_^ZNa4>Bcq"9c"P[uKYXDZ$LU(1AeVjc6?#j7PKi<>83!WkHA<H$NTak)brNqHZd"!n2DBZc'
%'Y=sc"%u,?Y(AcF,PjAkCgSJlE=O!kagVu)at(Prkbc>a!)";rWX'#IAh8-kh\OXkRldo?l9]AEnP&#e-r2BAK[EMR6?=3c`!Cc?
%N9rW5L+S73K)Dt%ZD^eSI@DQe#^ag:h1F)r=rOJ32fUX5VMf/1eB&R7JP(\/MeQZICEn%iX&!MBhF#gGKV6p>+YkZu0r0Ke+:V*6
%)C:Jor#WP1+bOPn1Db$MW4!LrebkgH0*[WbN(nt>"YD$!^b02[NLuF(b<$VO`feq__7#UC6p'#_M1/lY%<O2!C#11$-8EeHWc?`N
%Wc@Q[@,?$d?EQD'0`[m94YMA2A<kK2SQ1"]SeHk]Sh#&i.f@XfZJo=Z^lTBa.@(>LPa'(MB^6.GE+%MqZL1[H@?n91A$$*HYC;>U
%rU<1Yr#$h)c%\J7d0Q$KIF1fP!LFu"%&8'MPAXg#,O62$AW*e3_hI-n#jV[RBrWees1$:;QmKj/];dFE'T<<@L1Ws"F1#5bj&/sn
%'(bO4LP2LD9uZY^<h2#&1C=;pB/4BS"Z`5WCWAe-Ua(\kW]H&#E0^qIElU]7U.7a6=e'Ib!AWr>BD>IHq\^2I$Fok7,lp0Xb6$*f
%;cQ+K0E?At]a[h3f]FQn'"@BefRW1.3On*?WOBY="QVh&(=u27J'W9,^"i%?_,lMXjM+?DJOmG-Mim/Yqi^$X/)M%=3OOrZXIYI'
%Wq-:edqDa]/jnkoTuK1s"!U/lAR;H*-!g3`lR]0d"Eo&C(GJC=gokZRAZF507h>o6L7/bXXld_<>$^P0j]7f[=WKAWK4XmMpmnq=
%LUAH_ZsG'#LlK57+s[28!;hA4F"[C8\ucEfY5Q'Yn]4?rRQQ??)lpKXTr(<@3F#RGL%BcW!BIhrj:YXcs%Ol>Pu.;=Mj^+;08l*A
%"eM3KZWhs"WVTfs!aMe*]iN/r+K]OO*J<:\8?-<QCI]_PD\2]d_!E'!Wmq`nG>Mf]kT8[)N#Un-Al;+$fB+1YS?0]l+],td#n7[o
%=IsQ5NrZ2>D^m-MH?-?U&9oF'I0=X!67lLFc=h?3;B:G6E0<a.IKD.WVUYNsJ2PZuIR:gZWm^eJgt/s2q$A3S@@l8-$Etj62kb[t
%il+XMrSLAXgkCNX:cBOM1)7c*i"bnCgq`KtFemM,Ko!'rjsS*_UXR=\Lgnu8T7Ff(1d;"JH0$FsOaTpJ;5d3eB[flbOIA:Y$D8%_
%Q?Wb0$4_o;$FgOWdd/DNQkHiQ$B][Cbu;Ec\0]Fl6A-*7S#9)f6-.PSLq%$F9,jRXd;Pa9E+$5pjsuPdh$\e;^nE4%=U7!iEQqXR
%\?4$XqRmSc(BVgTdbG"TL"T`;0R-<5(Q]bIM9T<3Srtl)$WY+f($[Fp(LD"I!e+#h5i%-EjWHI2JSTqrX]<3W@mKU?G/tmL6V;#Y
%*<obSW\\tl(m'ki1!O3aFnF3k2S<IYF^XbWE31Yoob_Z:83Qb5o%1]2bnPoQ:]YeR6!T0@J`@2Z)<s`HnIh03@D=:mb7Gun5[9&#
%!c](XW%oVN6\MdReRaPnF)\Vt1"(pjQN=SYlWg*@0U7mkaoX++oGOB5h?rcjOGGTTa_+E^(S:`[&Y6E?\7Ilb%(M<(#16qZ(pV/=
%FcR'h(DVuSb2%10(a;;$PBmYI:TjO_>R$HcE>be+7IDN*l_G04B*\db/Bql7R1?nk%D4R_B;Yd@3lLW?dnopnWMWFC:<L[m!)mD5
%(et1sL\utWJ.@f+GmtK"Z>X%O^5Qo8"1*Q#>9.$;1_^u')Sk_#S(A4V=S^WcLq#k=S(E/jKk_[.f77ri0$[c*o-_'12:O;I^5CN=
%-,>l#Bu&':2Q$SB-W=nh6d31R4a@K-=X!bX]S7oOd'r9t,e5Zj]S7\Gd+)n31)JJV5Y+:a?GoXdWRALg-i)SEWc,P)jJdDP^S051
%##r>\M'4kS%Eo@CRbrX2MpXAr!Du^2T25B>UjH)#2^%ulaj%Cb$CeJ/M!'km>#Y#413/-1[Z9O^`5L>MaLEYP*/En"!gH-cI[/QP
%EB"H]dG.gD+i>.Uc#Lfa"uWaIOE&VYRcBJm,Grt1aA<=pFrYOuN`X7Ej2Q4TN^KsbJ(mR06Sr:>k2nYQYGF4$*.V3O8(;ND7u[9R
%+<%BerJ!pc<f^,VLAE\]UT<R.MDdB=Td!f:S3;Xd8u6eC[5;\$oc1cjOClh4EmLQ0>_akSo'&3b&PF:mY!Wu*<*]`V@4`,D6-"KG
%*>38:Qf^A+>"WiWn27`YM:/g`V)]%mEfca]J:"pik3>&/P!X42P,F==k5j1[#:0qP`+/N'!8qn$Fj52^PZp(.&%IH8D0$a2:;gD@
%l\7JIc9nnM4=o=kQ7kg#%dtQMMm/*Q]SC$nPOooZ3&0\]UhPAlpAqTt*'q(Fi.ru0In4O7qc5cU#>f#;o,kai@s2W^d.G4K:NsOe
%^\RK_md9rdmR9hl&h6nABs-NlG-8_]N_^+L.`_LH4E%qtI]=WjS4/J3oJ!J^UA!p[YB@e*-aX<5rL@/1#HR]7L)fIMMa'd.RIYUJ
%6(5`@<*c>;1W^DKZ)2"*hqe'1rjq)uO(T3g)eg;!4T@gk.kuc09ImH5deu]8ECDr3.9J:/n7_6iR>ll-'6PK1>?QqPS9[^Aq.ieT
%heYV0aPXe`BuGI*,80=?:apm:1?DHhAqc)C:2-iO5T/HW2csrRQ=ApIh,H`?]TRs_%pA+7FZHkCP'iqtPuotkdURI&dO68gZCJ9J
%57(Ai1Kn]B&)Q.90,[G=D!pC%IOj,=!5]VQ1Y>2Qpr-+\)M@om#c&@6JZVT@:=bl\/d;)#K.8jX&jm/9@0$X">"Ls4pus/][e4R'
%(t,'nOe8F<WA@^r,ldeO7uZ(P/RW7\]DN=>;sa].Ai%2uJu(9\.X)C16cW*66Z2ZNK5K@?@;*&ja@0J*D_4<gOfBF9QfG')G--fO
%a.Gu]EG.o(T=u*eKX[ABT5kbqI8tmBEMNK61PfR:Cf.bILJ3X5s4,=4.693H^O/qmFOIqi9PmId0C9hugW!"f4d49$qd^1pn5F(b
%RXqb?*%i>o=-pb.RY\1b4u;*`&EZb7jNj)B%_U4i*>]SIU=$_Qs/^:R2lN?H;OBZXXo,`h(2Ie'a<hCf/+P.NM0`-<e;s:hp:kW2
%HdV-$;&^GJp4%Y5IGmN>3%;fO-iXS+h3XN3SY^tes&CSe9389g@M"$1H2%%3G'A*-E-8LB;7lp;WsTfV`u,hFL3l6H+[>h1,eX<3
%D>tqH#rW^sVf+#6Z)RaS*(n*+1`"Zc)nHEOAn\_I^5.;,hNcXhcR*A?JSE)JNq,l4`oUr?<01m`(0ak/[%5f&iUGg113-mi<ZkNT
%!2/3-H5G^.L&4eS\=@c3M$ub4/9m<3*=:mn8CkacG\j6XIkJp\,Bc@U>.2+aV'sEa?t;V/f4CuR-$p^l1t7HML,b@$aC,);:p5[E
%iCB^j0hr_&4hFVJ=P4`b<!2@Se?_0agQZb0T<patdh8s*n&+&d44.'h^'Aei\%OJjaXao0$R20eeE+[8NVl&cWV48U/kWQ+McqNT
%!1nCMU0C](37b.[M[%P'kCtq<P8r[l<-V$Y_hQAGS8A601-\6kc(H@Z`rfZ6H#hl6`+iH48gbLa/AYgn7PlegbAk1Q19%RLK-KI]
%aOTI!3p.c]CEg?4"\3moV*\oL]g\^Zil+P]\t"N8dQ<%hS='Tt,@Ga;)o^fI#[Ki3-b5l:/2N74U!2GS46@f!9<qY]3Ojq"(QGQU
%M&YJ699cc2#q-fnpJEY#<dBYHdKBuR@S7@gN!_o%.8F_Z+DV%pW7]lN%&8D`,%5=fJ41_7b>F3jQm>TG!UHLiRXfBW9G9+?b)5E>
%Q,lZ]MnPM+"H96<!oYT:X;`V_013-g-)D?nJ3pBM86s1d?S%b.@g=.C@&fZfU!B^9V5da.Fr`C8Jf(+2)klZY$heq[*-b)#32ImA
%8Oa%X(]2!W+$MB8Ci!N8Q@c6T-s8=N.]9iUc2#B_@?(RPh"m;G8&s:"FXgIK`"ZCcs+sJKqM!st2:9)fL&jej6EYY@f`/s!)L;XQ
%Yf*T,[J:r]J4?O0/Z:Nu5&u=A6A"8jQSF^Pds?U_>ssZ`-XfjbG2mfdCl*3!(/2Iq-FQ1%(cWa1qn/W,,._tEEcOLIW]'!*"P#^)
%IUu8jc(To+.OSXPNRNT=!Er2kQbn7`-uoHJ;$StDaU;UAi(6j[M4><;78nViUM4k3W#!l6NDpdETdF,Fh0#+HWb\"2QTD2t=MtbD
%nmBENC4tB=gqT4)nk.%S!:nu]R\!,3k_JR,i,leq*5\K1ZGjGWRamjU`p4T#7p4G`R[]&riONHjGk-O<2BX?O=tX'<EB8++g9M_.
%O32R[(p\pq:2JrH!kQWH=9&^b^#I,#8c!^Ojp[a#%O[dWLtr?kU:+3.Y1?S.ZHVA#'s2luE:?RWe5B]l#"l_#JB"IAO?$OF3_Fg\
%_oon\1T*4]W$+?dOW:cLL,D/s2nfEL5>s("@iL);1kf6Q3dE$rB.l!2%-t]#KigMh8uFO0GYnQ;jWZJ$2$gUGjkS<d1Zb\'7>8g-
%\%9;QCZ>%Tjl4(Ws.!+idkfKfe[/:5/'MV+Elh*A'Q1^u!llao-Hr.(1G+?9,Aa[pSXAs"gTd>rH9+uU8dD&H_q$NI\W9)i+eUO?
%hF[KS6MPM(/.8@:U)!aJiDl2jh20E07WJQ?`mTX=aI*5uLudP@2UkE-NEH]'g:UY^I+"?e_]:hJ(uZAO"F"$=h=`^F&',s@O0Yom
%iEe0d#ecFlrh`ie$lF^V/Q8h'6#u83kUf9_=Pi/dl&+*qA>5>C4WF\L:apI',7e$mhB:hD&@pjI@)=T;2gCofns2I,T]/cN=R?ru
%_4r(l+sA8@Tj$Y::BjCVa([F,(2WAkP:n:1?<DF^AgH(CAjH<0b7j#-SSAFpMN"7Go*mmi+#)\:YJ8+Y(,=s&f=?\t0fC;50*9lQ
%aNNFWC<2e]Np.-D)&RhApn<Q,8P)4*CYt</]2"BUK"S](V1E7u*Gs6AaV!mD8MfO)Yg"N6[&RK?8J>As2leflH>m=b7ns-T==e/m
%`XYABNFs_PM[>RT_-Rad2c2^W<cNp2X=><]BJCFB1ss11?cjp'R.rQtd=PZcI1n1W2Gb2Am&)!U\qlXa"%kui<n1)[d/rH>RV;5S
%J8_/>Okb:\)#*:<EDOan@[?aRje_ju\$[A^Lj-o(D!mI?n7W1pOi8-Aei`/mc&/0%k"+*uXsteElo2Sh;&L<0=\%G`L,2&+3_nIM
%3\0r!&kQUU-A#GLa>f#+OGd(m;)\Q,-ti)6N.1Pu/cGN_R&s\qH-*C2e880;!`uRkdXH:Z27LEdjp%ZNOttEFdk2im'J9U(oS!h.
%jCTg)hY:hXYsDpnC3=*!CUhF%LG$0jIpZ6!QY3gp<SL^/XDkA05"t-=jM"GL6[1&f1f#aI2BBZ2)5rRVV)a)u9T%'k2ji%':R&eI
%9QU=J7Us%f_UlFE>rebri9DL-T`j;\[1-jH^"a?a9J:>dE=63Ka#F[eFd8Y\JA9aJ@VAV!.pWaG:*RF^)g&N4`<\I0Kou6D0WX+D
%bA5_6X'cZVK4%5YO>=GRLbE#c(%-&be2MM+Qu5Z-='u"E?EhUNGTs_[8j]riDJk]1QB.W*1#+Dffh"5IgEK8[S?-U9,4a:UG#sd;
%FP'.E>8=FI@d$9+DGa%SM(?k.Q?[sg3CZaF^5+#;Rt^"K+pnp-l:,SO0P>9^9f,ZC-/:oqI?O\Y",>4p9h;M]'4d:MEXml0aUi%L
%-cdW%OKBTXj!e1TLq79j'tO!iS[!mg0XcG7Qq,s5_9Q(#PesOEmaFaP\X/ZnQ-;O9f=[F(FJ,e5J[!qLo9&ZQ6bG*"L[laK.X(V;
%6;=+t'tJ8@ab(e_U*%7[E9!'MLUa7Ed4+XKjhASc.tdHr_F7bg`),G^`ei]s`ps8Pju4k)3($'SOjeOp6?n90Y5%?LBkA#GAHET0
%*6Z9LA2U)l8'j(_$hSd'hQYG7)b'q!]F8-(*sH-S(Yc)D?8cJ2pGIi+_2)m?L#%TZ\(&;s]u:[.ZeglD-WOB);dHdHI(cr=JtXm*
%QB?Sqd9;::Y*7Gb*=^P&0GB2l>*D'_/K.@$%?sRHM;U8NPXY"1)gZ>*moCCtk<ce*$/Oq/pf$nDI(,E#CqkPU`'[8>7jfijj2R[c
%0[=_UgWJAW&=7L9Zth.Z.\Z=?4.4rVF?#]EOUe;Lj::#)F>C=X31N%;fk[LTS%U*q'ALXj=ddm-O't$$g$D2(PA0D0$'rkOqSk$X
%qco6=%+FQb87D&ZbpT',9hcuI^LHdVoGd.iKX+otcPZo^>C?b=[h&'!c<SP1E8"<M=t`Z2o@f!UnrU_j0)`:bED2"F6].Q(p:$4%
%0?\.*>/A;/*Ca@K:m6P+"-;\NNUh84e@t^^SlG2"PFj0OShc/.X>Y,+S,RG<-dlPL:7kDs=2j[7Z"^g"Kn8;eE\cGl'BG]1p+sdt
%Trspt[7P4qK-?m?1bF[=EnDbGc#LTX&gqJ+&Z6m#=nlY5:.3EoT=ePhXB%'^S62okDmRZ4]d=8jQ/Bh;e!H<;_@69bj(lg)7lOLj
%)k:e`:oYrn':iFUMa!25R^><rnN4,&4)Z&B43<(jh5+Y*XV*8?/&#R#(9X7O:O/t8*t=ik8mAE\)u/2>hoE`25(]]Bau>BWe6qIs
%_jHcd1%_<"H2nZ'i>m`qb.DmsQ+4gLVhV")3X15FM-RB1$^aIN!R(o!%.jJGluiQ2=YKHtiYS]6+i'[opBTJYcY]qu\P92=AuocL
%^sc[gFlIXg'47%XOPC_?5Ll$`BI'M\.?#u.N\3F,7)TXm?8g"e_S@aWID`<f+^F.V%>%$O.hFA2\`aRElO/pQ^^]e94m]Fl]#4(?
%gn[!8KQPH^(E$4m+<eV'2n64Q[D=@r9l%sp:1>rW%+!NgjP.fR;EApKbgnEf[6BF6T3Ee\[crW..`<(!31:+I<@arSH>rG`OD\*=
%Tp08:*;aP8Nmg*SNbsMdBkH6^2FAe3E:_P;dUpL.#'MTc)O=M<_!ibbGa3B'(<A7KN8W)8^0/JA,t[Ot)p`:Mc?@rtR]UPl"\WOk
%FhAn!;k`[^SfJ%n$SV+*+RaNLC>t7<9I8$KL1J=G#u$_DPD:9jc;`PLQ*M`_2OD)3+`!/8i0">%P7,7TaA!Pm*%AC4J@e"RgHjW1
%.$>IDNi?Mi^]pB:oBoBmVq[&Y--41QW^_`)_ebM%CKA'a(C(hX&UBasq`Q+O?<e.,RicZVXrZrp*i),1CC%E59D'sE$sU[ATeS(l
%79N]0S2K)qT>A@`O@tu=h6-%s/a`Y5aes:Q$?ogIms3m4k`"QDN<60iKV7WQXYg7f0j7B:<30"W._eJ,k'CHo29]oP]f]e1GMpFP
%9D@oL/R@9/HRD`4QbB>$l,8p`:J9'aee$="8<VU_mM3r]mVC;OP1V%*iZ%pL.6(b@J#e,"No2$O`J4VjU)Yfi#O5'o$(:N.19R>o
%U_`.5?LQG1Rs@q4hW'8,aK%>jmPMs5mX34Dg3P"(>;9aP\o9R3:uG<)q(/O,@U,>=r?a-7d2LW;b>mi%)a(55NM-!Kl%:aIQ:18V
%.b;<VW>Gu6iPb^dPf'L,caG(6KpC;qoG2(="h^%t)4@n#]>$$QXmMK>`l/f12ACOr&touL0:J)kXd6reNp@o`SPd5Qos1_R=lRV@
%8^)7<Ga5dqes=3K`s.",4RS3PAKINH0ZblKad=Ye?94:a]t0Gq5Q-4M)h]?]TO6XDek,5FVa^JWfP^@\dC%cX;[YBP.p]5rX98H\
%][$,pDdj(3gO4&u?*D)p\$0`[2Ajb#$.=;7B;T>28_srm\?(1-?:OrW;hF)S"if[;1UhOndTb'O4fO:J`3,b&A?3EfqQ):.N5<h]
%?a.3L4ej.\=5_i76>674^"NCDgpu:Dl!*mr6PpI+8+.DQ*WP=@CfbD!M+2MQYj"L?fm7m#jtJH@fC4a']rRC,cdoAGcS/br187f5
%d-*9sYcY@P7Wug:3ej1@-Ebf16?0'@mQg)=A"TE8/*UiR7O)peQ*Maic8+$EXB6UW-gg@LL-hqT@S#LA?g3BT5Gs+c@%CcGYjK98
%B-I@ge[#Hq13lF5k)QhN/"ot$?2nd_UNDpZ3nCgJ@G9MA#3uCBL2@1(F):8HRq)uZ`4chtR0N7VlU=iCc,&PO,dthG]$PEAh/(QB
%_)hCLA)!R!KU[>AAmBtr3RC=Sb_^W![3BJE2&(gLIn$-W][h^iF7*V/HbGA9Y:)<"fad++qq=k)=QcYYXt>^tZ0Z%&$ulO8aEAW4
%Z#'$5iLK(?)p8HOoIGr=Il:dsGI*9?K6=&+(Ud#/#IB\0K@t2`CAo*-3gd#W%HlNk2OM1:P-68l^"Fm*Ae`GrVnq(rc2ANl<Hn%T
%XsMf-Y4ZEhUhQ@?NFCEq:..QUf@S+;3GY,hCD8]9gE(1MFRE9Fdg#+G[h?CiT@MrXau$N[H?Z%\/WEIu>9=d/\XuSi)m%HEE,>EX
%&_":[9hZM-0B:c?Xn\u`H7dUa[,F!or%esc9Nr;OcFKE=9R@X#^S0<PVKMIK2Z3Nup"ODW/g$NT]E-*;T?*gB;Z$4;XSMCPX((+K
%c8F`!m.hrO9cJI6J[$fUdus#"`c(t?TerRYA]3flobgg6<T=e3,4e_Rfc([G7:I36Bl=79*&Ws\3T?/P9Z0F<1Ir6@G;\r9\Wo+0
%Lpm/GX($nLc?Y*R<&R@U<@7POBgj%/n>s8Gc;#p!<D<9N,K$_UN(@k#8Gnp`?Arm:qGQ+;EApBPm?/=)M1-ZKV+;d*<G(6N'Ls52
%IjABQTTWTG)>O^:Olq:XM.7f+i;7[\ItCq@U)Yc+eX8Ue3T6mb0P=4D)e`9Y@1,@8BF&kBKsW:S!`+B8fa6E!Wl9j,&i8mid9AJ%
%09)nr,9uH:gb15fmH'<a`$%W"A(r"]6rXe[B(;26(:L&NO<e`K.,s;<K=#V<CthG;`A<[(1@Q\rcpEo`68=8`+:7R,P#SHD`*g\B
%;nrsWY_!/CM'h#V5aJ-1!C@UX$t.k2RCS,E(-aTp9l]KSdYLWgQC;&l7#&#@r4C<86Ne3+#(;G*BgeAW`:9rDZ6;G0Lf!(GJV^p/
%qL"X6'LfCf27]h&\Ei=GW"A,E)S*INRST_-jM2t$RfP=B^!uHrggYk;#&FO_-H2R#!3qn>@iJ,Mo&!+P8\*$QZkg+FUX3L`bW't!
%N:LbQ>>J4UVr:H$SsV0/498E=VpS<i*o'g?*WVaSdr=NX)rmW*Vt&,:2iYkHhQ@fH40eP4C2O19!V4gL-]+)"[7FFTG5s$)dppKK
%kOs3u)c8M4Z#-ae<,U7n8nBECff%1L>Pf6OEfVtL"Kg%Y2S9/NLp6,t.3p.,7>h1^'>Vh$AnK/HnErk%<p70>Y9a&>rs/p\4tGe.
%P4gk'KpT?Ip2IlXoA#pte^U0WVS9Ic)a.?5[3!*LQtB=#jTh;=:$\J*Hm%pk9Z*,>j/"E;fXdXhL9XjJVo+0Z))e0dL/#0;"_sYV
%C,e`#MEi19egp?BC&=I$eXCXXJ&%NGI$K,(Zo&_=O8cUE).$e6]\D`FW?;.ekk5go7IQ8Fp;64Es&Sj19?`lLWj)*%Cm]KNBSJ2h
%n3(+iPeN]SL)EE%?r:Gqa)?aeRe4C:/"CBU=Nu0BOcsN^UM^OTgtd7cIP1q9qA8Q3@d/fo6A=U%jm[Eb.DGG5mC%En6;kF1@Y4@]
%Ykam9S!u3NE-HOh#_sB5I.LPtaB:N\G'X:NX=#Tf=)BMY",O_B+)utf#tBIMQj`G1ehUZJJ@SLI9n&>bfDK^.(&PP8#+,ekgd`p3
%Y8+<RK;/J069&Qu-2=kl1N,>0!-=jp2B?[c<p6AHpR?s(e,<XNk;"sr5+#J-1CJWL98E*,-h$1'1>U@j<&.J*kZ9I?F>78B_C(qb
%Q)D[fK$JHcqW9pn\$]l'`dd4_'04BJ4<g`7oO@eT@Zd=A#3'.Z$_C'k;!)?8k9+"O-t^hdXl\`=$,&O%-<XK1cC[NH;WJ3dj*u\p
%5+*(MB_s+JqYqJt@KM\/n@TiY:geIl:*:aH2NT[=(Qt?%r+.09Uu`k?>91!KDpW=r&=%00ki,WN8I]dh6$>\)m0<-u*WUa49mtL;
%*ro%!hu*XD@X2WtOUFJ8AGdY?m+OnUG?F;A'0*21GfML6'UHWjD/568Ds]P^XB(JkWO-nqNN`A+,pmkp-B9ZN)ruhs_CdlCUdE=*
%p4P*s4pUV_QF1*?KM=%GZEuS:mqB`J\5X&$k[K&hd6M'cq!'([eFa]!E?uqf?=gXB:ias967:G`X_d>!rkJ06TuUj:8__`TS`F7h
%leAVF)#1Lm8_';++)am^7VWc&UX>qUdbmI/YVg[SB92.R#m2q4hL*J%M=P-bntJ-.GbL6[gH;Xeh6^&cNIj?a5bhe(r$O.'H3CMP
%('0GY?^H9,E.?TYeWAUIO![%)a7=4PHU`5UpkKV;AR]Q9F7$$;M-JF7D,%_&%:lVMf%&reT=R"!)SbZ%#bmj,@)OkBR_f0_puu7u
%DRrbVRO0)8*rrDl4OB'`>YqjSFL%?]m1_YbCoBJGR86g).fooH7TF^R6lc9PF?]09ViBH\c4HbLRbH%#C(&`lGc2iO7EPHh+(BZ2
%HFW.UXK,.29P=/:BJB";7qAdn`I-ZTh(*l^"!T_D24[s>+^43k)4m^Ef#OFPUdGZlXI`\UdFP.R7t8?t9uZM9(7nIpSC6T6Og%?L
%9:X(r:WeP'Mk\n4b_eP.31^qa+'Cm\NatPjE55*X?DeP9[qt,J'0]6EQeZ%^D"=#QS:3sjWQN7bUAU%^Pmk,;UV'Ek(;:W:drddk
%;E;bJ4Gr*gQAP`*8I9+Zq1;Go>=t=P01AHjLc78e]FRnb<=RPt.gBL\\6rjQnT/@<aB@s?P-Un?);GcUX3PsH^t-dREKb<h_,Y?Y
%lAJ0H*nU8J-23r'"W,8?g_X3_0"io5*fSX`?p.;f.p(F>*#k5E=88k>mg;s0/\N[!OB#BOHg+ge@S*[PfJ`;/mL!DmnG\GiKo`pY
%eeKIfaCXcIp8r0"$aPiGd?in_X=*S'$h$HKAn+t<'39>ah^4@QdMJ<6?PH[9M`Zdd!$%S4A(E&7%4q'N\!P#UG^P4AK;;s2gc`X%
%=Q$#E,Hltch?"*(Z]/d=OeG9i+U:dk'ulnNcS4lXdZYe4g6GKoX6@(L!NMR+"3G$ueJg<Ki"gT6<.WY'6BijO&X-`"*YSW:SWF,+
%:cRMF)WaJN$XMhK4;oQMoI3#O8@FL"\ga`Y5VeJ_B7Ae0B.8f^\=7&>is1-IAdIu&385:%d.l,ciGkp?c29gT9_")aoaAj*+ai"]
%bmXpLUldDX6p<RU%#K]XLrp:UJR'/Z)aj*KLMcUE1>`KZr.'U"KhqR'@)=fBAgEZOR:r=WT]@LSalR"Z0#GeIUeF[C3p_cg5[5p0
%edg'F461c[0XnniXFqE(ghY-XKjApqKj.NFb"U[o`7:s5]+]F0/BI.$a:8jDGp151S>)-9FZtBBClG&hm3uOY&hEF3@bXpm,8$$E
%kd.gqg+_7sDn#N%PT)R,6nN$*\Y0<oPoI@g0s^t]3a?;&o5o(t+Dlq&fmt(T'"XMW(FVaLq18I+DT*-^8i<.]a=`W;5F>J^`=HRd
%m/0*uOP'A[X(KP4+381C)>pQ]'M6%/"/.S!-pOk&[sE<5*;mV?I.3+;LqT505n,.Q7>^T<M-`m6,Ip;'6KP3t?MUI=ARZ&Nd&FTE
%$32%RLsIQ]X`9</2@#])B&`<IR-4r[a,ll;0KgG>)mGm]qLOEG).QY,c!($ur"+VWLu=cfQ,G5id(%,OBIG*VMS[F",7dLQgTTa*
%XH/b^`:+I$"^0<EE^:MW^m&ouK(%CYMEF/bm*#U8V2Yd`AgQ+hro#W&AgVJbDG8sqhO2.oI`2H(<<FQj6Z5PU#tQ&!=%klNOR*l!
%4OVcX`e:"#R4s28NTY(C?io^,AHIi*5;@^I9Oe.KS'D/<]dl[IFjucY_o[*L7*5Hb0nG'\@fgMQc32j;.ji2"]?@E(&IB7mO;H'`
%"[$K83Z!rA+0SqbRoq)^U@9C3iW7roI<g>:ou$IYe+MPk^\EM5km>Qu*.@Y^P:@:BjlGCbgSZ-2p5__9s1`dPJ%am_m[$GIrc#T$
%GPU4[ks%AdIK&?im=+d_8"Y9XIJa"Uhho3_?Ztg++9&Itjfk,E?1M2[*/E>Z3ZH$-p?;+O0.X$6s)tdH]Fn*A-+UF5K@mrnj0(+S
%p6D,Cjm,-K8:'raDeb]\Vh`Hnlhe<J6i?TRs#bT3s8)$Ee]G_HrEnl:K!U6YYO=[@rE]:"rP8p7s06p#T[!n,C^'bO1f=EH:*6XB
%rquPcg8ud'Sc*:&dV>m4X52[HX),Ft=iF\a<R:\iF)cW;#PH\mG;usT!K-'*2Q69GkGP$%8fL__*ee6LM!4^+pAXLIb?-e4U[#V^
%s*"5:rQ>>CQUSlOb7>-\S"ILAFbL.@bLsD.0VN_Gqc;g8@*ee/GF-saGR8u44:o_TQ+`ji>TD;'Y<';r`O6-$N;M0Z_(\KVEk>oZ
%JsreiX).pl?W);NKkM`Tq'EGFUf>e6rte\aZDb8r]R<*ED3Yj)(O(:+"%_!IAM:j(Y#%t<L4CX)'!fimkLptWJ"9=UNam2(X-<SR
%iDNaE^E)RjN$i;+[dG^R#'k9mm?U6.h7bq`q61rsjGSi,:I*F<1Sni5)im(o*bi3M=Ou8UnSn<A)OZ250uEu5_;`mMU!-,)UMQ.b
%W'mY8qr]Ot6AWqoQa1G4C,i`k]?7Rc_.t==a1?:k94U@9T>It-(>JiRr:8gm]/AauOH)]eZ!*0`ND+H`K9hppQ)lq=&,XDFb,>2e
%U2CDd`h.@Bj4+t?2fAp^q')9'@Is>-MUp0`?kZDWaaiSVFo3:&\(%O16CaVaMU3&t%&<CTR@%&_4^?il5I%8;Za+K$(Ms"WZ[t]0
%&l$7\.nlO9hs@9?n3b.dV`a/;l?CkSeUe`bg:,.eSf7ru,grN%6:'>qJsjDU?_;`AS$0PR^#OO=hjk4Xc[MhV^HV&IA[<S1MC![J
%%ER4MIV-:!^o*Rdq7EhK51H4=Ge!eCr`==4m]/BoHiM.b:*#+nE('2nh<Dh4a$8s?F+7O3f"-D2,ZsQr_p_le8)'tR5E:49qBXj=
%M$&0]0X#ukfFQL,d2($-nSnI*_r^b[?!eUek.pH!XcM$2d0AL`>X%KZ%Y",$J".B@h#=R]foNUp#8:YGrV%S3%b/ap7]4,aF3o#K
%rKd`dEF`(6miQGFTdB@(?!UX7<AWPR;QZeO^L'1;rtnp9p[7nGD&pE15?pG?a"Z<+^;'\ECOc5ZbP)!$/,:D'8*Ak,rRH\XrS>ru
%jV*Z25&]?/A&['m'n!X:LEH:3!s2jps&K$n<Q22SI!GMJrT1rOh:;JKrBjQt%o?X5nrf0nMiN3_ffsNMq%rJS,+[7SMqUJ4h^pi#
%n9<%c!mF/mamXEL]fO/WO70+Phd-1WS%F-]HbB>R`O"np5HV7Y$GN^=pJ?@PrGY,*>)Khd(A_WmWJ/(_nFZ^te*`^Ka#]Efs-!V1
%hs;HRDa'+@-EQM1H=(=BO4W"oZ.BK85&$?]ldOV_f>eiq0C.EIJ8R"^s/[5sNL'=*Dfo1])[P2hI!E6kFL@fJ3pY"qHZoRO<?8@#
%",m-;0DhfJ3Ym4X]Xb\eHHsH/Q"gN\<#9ZN[/\n0b=Xr^4l$'_^[91@nC>eVq`<<\eG3;`[-oNsr_AIIe^iD<<5!;OQi4gK9Y\X2
%@e*!Gf87'8s#sD:55h^tJ/s)`Hp0c?W.l]"XM"ISJ+Kk1:NarhgfM5q)c)Om?0`Oa>?frKr9AY^3WK#Hb<OkMd;&QX%cZ%;_qY.E
%k6109s76/'p%(e[n*W]lGLq%LhYe[!R%iG<+1kTi`UpJDq0)f1iVg.G?X3T7IlK3pS(8PkU_uX"4d]Kd!9hBDiE"R947h.ni_C?^
%[,L=!nN#C03Z,70[2=/b=X3=GULeWn4*gi_U["\fI3+70pi$DR$Mmgie;1p^2ic1mT*`R5F3TW<G=Na8IfA:3OT`kshKHP>C6>13
%0kitiZgTlhZ?U9rB,5rQ375X8IH6$*I_kh.ZB8>qM;`UmS1m.lC[hB>o.][u/DO,gL9\UnTod\BkE\XX-tQjV&<SmR\85ck;B/4M
%+TP8<'6a@p!F\8,PQAU)7ldlg%Z>^4$WO^Qk5d@[h8!6]Gc_,3LUEU;E^>5SJl>!sP9=*162gmqgN@aK!U$FA@ZEPi:e2mQ_53AY
%_(K=:N-C1.0oJ2:*%mu)P)'QU)`ZP?\kV7.*rs$/K%$\">7.YZ3^ol!*3as?aR%/=MZp!b8D:TsK-=UR_Wb)m,SaJNnLE#I2<ctR
%Y?Rul$;uL/38\5W'dRjZ82aup]T%OW=X7.jl!J;>qQDjga/`G\48G^2QUs5E!=@\C.7ds.X<S"GbKPoVMQ;c$(K`qGd0e'j\t_e`
%]AO8e7hC^In;q**H#XT;.[^K%P17V^5`jSW(%s?AJWJM1c=@_Tr.XKf9RD?V%k>QA%);scLsJLA"n<HHLXGB0]Fl"r6jHf;Gl,MP
%2&V'RB7m_;6:ajZn,u@2<i7.!]M.r0OAnVhG`W%Wj?*'GH2KT5TR]KWk\_Nt,gYCR52oQ*+Dg\R_`E8%=(3f4:'/jp6@2EI*2).-
%A>NW]lN]\gK?Ru;fEo11n`Pd]%[jo\@;WM,-5aZc/N?aFfGA;7*@Q`rLnOD;9M?*jY#_2SR!4</W!5e&91.Mqf3@^*8YcR:Z!lQQ
%#It;qF3rFK#3tEaCbuJ1!Q/Q77d"BFFsZ0c/QDcU6%R;BU8m`.Y\8:;Tk\U]11=O5N1)R`,3+g08Jh0S2BG8*6@Fm(9U6:HJqM=J
%OF3]f!A$mt,GZ*p$#iXa1EfLC#43uJi'8Cq&3upSVif@6K0m[>kS+eeLr8t@fo2arKD^OU:^^dd1=6sh[07.(:+2B<EYnnRg(D0b
%"^0DVW@iEN5tFPV$TGD(L+*LID5drs;HQqb80g:7pg1e*r@=8D@1Cg=+d_b5q(-%gk/W1Z%sA5McspD)!Aet:Mq?VHLbZbT"\M>@
%T*Gcm"RMf`6H*[/UkGD@3ZJ[7@*-n5dNFs+0O37s6FLLJ6'&[EL<:N4`s&FWU_`c`<*=SOb6teHEgdns/AM]_Y0IN>.1"!uoHGMh
%1(kBV/'Ei^3676eUbVpO,TW1VTU&#[6KR_3'r%^9W'sub&tc)TRQjm(>XE6O,Z>rn[S(4CV^WAtj9dIKP>j:L/VJ#eY_3jX1?r0c
%^^%acKB2f8'VDZ^#Z[K$;dgIU$r7S*AHUsI]a.8:X2WT0Hjp&WQ(V-G3<EX*9.u[!:8<&q6e7,\A=2si;T/>2R:Ms,Z?Sikk#]Ri
%#W"i<=GNj+@F]6f.C.Gi@D]W]\/(!XMc^*j!Jh_^eq?NJ<m<+n:AC_lH-X%.b0cj]p;kfb4^n@,1P?rWR@9eS3:1-beof%\"=[.c
%nKK^E"A=!IN#D/</DZSQjGp>jjbS.(b:#iBZf2f9Q,Q5\OBO*QTdmD`_H2h*I6_b0-^90#oc,T^)A4/d7[PE-4Bq<VLfm$*k-lI>
%AADa6W*Wk\p^l#\dUp,./;#RSJ+:`pQ4?sEfnb?B4*q]l1(:"5kZ3&\Yu'sf'Zkrj$&eHb:XqdK315uCh&$C\@KI]4Wkhl`)$[DZ
%P9,dciANA4MEg-4RbHcbTL)\<:tW_i_pi[L"[[GNo+pBSY]g.WejW'd+T8YKcH&k$e_E)ak_(%fKMa>[iC,-cc1*gAKP\NH;iI'e
%nS$/Y.X=!9;t(Pd:'X"ASP*&j+RSZ+Jp$-%i^oo\;Wd@j^_T`5K2iJs;aTDHOe,NE$6ceQl+0:I$Xt24DB3o*JZ4Q[G8fj78@NIf
%?;s<:GJL;XbA$K)?A'=.]sChr:rg2c@eF`o6P3rSBQ2];lWY6ZBM^/`"M!#O@qY=4<oU_,FlHr1$bW35\6e2ifZa$7o8\_7Xi8f!
%Ls^:'=a73p3kd!pX=Ed[1LLD85aB<0[t)!:<%+gm?n*u`0ZFA&`c>"sMiScPC`'Cm/9oSq`/h^2\r3`gQ4[_hbFV/NC%3+(L_GWK
%R7<;LK7udEU14[C!eInJl0F<G8j5$_-3CRdi4IW"1\p)ZY(S;2K,AT1(q@S4XLB/kU`FuH&IRQd%5&b?;NSQ/@VK6Oo0G#nk_g9K
%Ajj`"F(Zt;M/#a/P/me,!T`@l-6UM`J/8oX5cQW/AdG!`$=<$)N7O'OF<3+]DM`tg-RVsDJt-LSe]KoS"WU.1e4_Qe9-VFQ)4>5j
%^,@S]<9(V/M?q<S!c^eF8XVL<T!(:Zk(!Bha;0D`9q0h%\L7oS(J!*n"=J?p&?Q_l%\JKD=ID@jRVpFmT!S5@XI5I+"tr!^/S*X]
%/2J"CU9rK04,iFNfs)8C,DcmQ##>V8@1`C(&]jEPPqH(nM$p10[i,ggLn#EPiMD9e!1u6qE/1N^>2G)RRW/b=*^"gHRp\JWT[P7P
%LsX%QP7-*Q_o<t'<:P;6@G$s7R3Eg_KqpIIWI-=QWW%J\mgqb"\Vb%\;2okoTPM&aECEiuO29e[=1hs=NAoK/RBGP$aT-mjp5t_k
%>k]r)eMajT9atH"L.Lel7-;-1G\\6"&JI0g7*2,DhD8DI*a5B$!CW7ll8DF3lCBT6GDCJS:G&[$0OUGW%Q:pN++s6t<K6=18fsj\
%RlNchNH]8+)84:?ZqHXS0WYE]PM$_4[hg:b`FSh!mtlAE1GjfhA54Eq`_&RTVD67:PC0KC5eMaUS/muh2e#M4\a(aAY`-8VgET4B
%]uYY.8_es#qHK9NYsm[A3#-Ya%Y<?:M8Rf`D5W12Mt=G`bfALS-fk*H,YjTjRP=XUYc;B-lmk?c#d3B6o+*_\!-qE^j)@f4iS!+_
%=s<DNbnWcm&KIBWU%`^9,.f1^Y;A^5iT@b-0i#tT6l;7V,NuT,*gMA9B8$L)pJ&j=7_)N;/`]k:K>L_VlC_`QbD<2$\6'q/g$i7a
%\3<2ZN+"Uf^_SOrFjUSEhPZ]lFm]!*.Gg8aP/jm>M&kes@c,VnXTlZg11JL04bXm.Gf2J9REIBWH&BiJK]IUcUjPY#:;"/4m"g:7
%I%ctqFUDLtkjCs='<Y@gF)RT8a.gTl"tq*umCjOE:E:M311"3I5$r:qQq0=jU`Amr;_-D;Ft#2_RVZ&)"4Uu!Ai<BT/E.,F4DF*8
%))bGd`3WLU&/6Z3J8j8:RnFCtk-'CE*\_js,qCU%).\(/>h&mT'*Hq:@^VAdDh!>,8WfsUo4Q!AEsQ].LjdSukdESA\DTf#]_gA)
%[2qH"`L!Q'FTrIq=*U9$"IhTUI9S'`CK1b"QgU2,+3*hOP*%o5aCfu-,k2KSC3:*=95YXV(f"k6^HTKs^^*7#-JX2=CYU8QlIG+<
%Z`d6m4NA0$ND(m_OD7i[*DtI!m@@WpOiY%l!Ce)_ND\!2WGQ`snp(-h'qoms!kTp*X\"5<$>&W:XQ/C(:,`Gb'MfqG!u>U'>g+>\
%JAFEfHoj=("X.\,(iDqNZps#)RiA*gU,%@aX.FMA4E(mjgL2U6P,&Hc+pD=k0%._ab%V2.;nQ'H\qr&'_fK&jGC++DiLE!BJOL(j
%F"\Z6H\_+9%ek#KXNcfa):iCsi(h9SdfP\.\?Hn5!?39[CbANT]^QWCk\c^&%FYW<h(7X10"=ua##&%+QB8cCN`T(a(Yjb&Y4#s'
%:^9.CSLTEDW0m1hS`NIA%q1^>_Q)c3M%;'gk#`TGV=NmWK3XM6LU*16gK&+Dd;Z4*I[M=5f3^)0Fk@m".1hHWLc`K&86<GtUCOgY
%:C8:*Vc&LIYgoFa-4$3sbtdT,q$SPQkJ)-hib%CX_[`&OT\i]chL^^8^*+UcM]?5])$1+:fXi4Z>#?Uq/qnSU+pW;d+L#bKoIneZ
%?ML7n-J5V[8q=b0cT`CI?#uX*ejP.Aa!@&[e8eW`5tmT>juOb.LASc6UDq[9ap%P.N1;Gl2U7`\ZmNf?j'H9f#P_m=F#?WlE;^Ym
%5,SFl3l(HI4rLTX$nZ"U&EX9R_/r!D@f,+,-A:R"m,#r"_XeN(-2.]h#>o>mn9I(<2mh@&+h2q@g?t8kik*?FRLn-0U%hA=!m+>5
%><X_cWdPFdCQ'.Y+k)Ae0V&f'mRkMscKB3/)2m<-,IioU4;I-dC(k'.oEk&X^MQ;VeX,*_4s;7TT+LW8XSR/k90r%2l[0P"4rl[t
%b_?/HaY5F7ADgXt6pFJ%'hftWpoD_uN7iaYWd1"?#R+'mV9O`)R:\gAp"=jGYCX9n9a=pd'lSFm#j8_d3T^EMPK.r\k9o&o/8q6V
%q='p?3Zift<-GH/g\q-/AQiaaMbdrFJGFmL9\/h#bKk>r+/(>kWdh41rIX;MF13@1Bnli:XF?Bn)udoa9_f9l@I!(LlQC3b/-EY7
%[3D.*#OV[4\@DnM4:Xke-p2,LiXNGW\W$.1\iMOX"00$Q+UH&+EeN-i=1+X9-1<g[_Bps:DB3LDj:e=!-c0IlYJ[I.U`"KrI.\;$
%4)j>?pA!]YK3U/'K-'tj.Yp!+)6_TL!\1W*R"^(,*gAS#XU1e9c*37<4'q#,)e]L:qE`AZPo[BYU(EB4rb0VFb-&h#,mq^J=_iS*
%Zj<?5P#m3V+7Y"tK3[s9Rt$GrfVlZak$Z&VFOP,ZiC"U9Sh$\tX;DuoQNkfC[G1;'>]E:DNqK;J;))LE2c_&8M6a#-3KrmmC)]t`
%fF/l+pLOB1b`[U,*V^<[Tct#"4;Y&,IN_H9Gr#bj`-e!:-ILf"-uPp6NWpS;!&D:Zc.rE+#Y[M?c`E.KP6`6+L9Qg[Sd[^9V]M[R
%EiDsB_!%71;)U-T_G"B_hB&q$:eii?#MIkW?)ah/,n"a,oHCa+nYEu*:l"!dda@C@<p&CS8/HmbB#Pqo-=9Xj!l^fmDqlmeQ?k<U
%W>&+6EMcDN>+CH\#W@1"lX5>'j^[b)Q>L;/%Ec0Y]36'i(4PYF1ri9a35L]$!Pr5qn4B)ViF0$'Z3Vh!g*6%f:+D7!AAH^5!=Afe
%2$fKc)`@Do6Vu%MY3o6r:RDBXj@KkA9@bk<OZggbM&!6F%/5\#F%DpU^,Tp4!0Zhj05W<(\at`d0afiEL0=5b,F5Y]e(c/M(a*st
%P;,X&o+KTO'-/\M=$7]J[s$EC)HIV#3OVKP*0TfPZa._f[Hn\gFa?<Se-#[[_a/L/;mZb0Z>:L:7Q9[FO[LpT4,$/Bh95?J%-(C8
%"Z\4t7j!:B8^!*5>W=TF"'n5S%7=`ld^'%]26!))`/gJNDSV^r!>;?pRbSXT#=pAUK.G!?kITRdpmKE&gauhjrFWkr6$bMUM@rH@
%"KsL@N*?T02qEt\,S00!3&=-4JXaGTE(F;d-DgnTal=^,[9&PS32'Ik+d"mgN6\U00,Hg00[&8TC1;rAjG%Fd41NTrm%:lE+[bT#
%CkuAPoc`eVRoEe_;3/@]h#qHoL(/K?df1/c#osfF:^6VG*J8kp014lnajmc9J083:U9K#5?GceZ=97AeHu%BnoVhsPpM0r]:1.iu
%3+nl"Y]9ca-pKtkj.rV<n["7\bStFT?ZA<"Vf@A-fCl_\V*l++JcR-C/C'[P1jMD)%KT,T?-XX.BRc^nX:%@V"Td!Wf`&9T=FPjp
%*YPn`1LM=KM!HqK`*2g24):atN]JH:A_.8Z@Vn?!2(U\u94<K]'-7]'FcL0ZYc)31REDXU3hQhlQsjqg;T#\\="nKb=tYZ%ku7d?
%&ggdL1E1Y$'QPoN.W?%he_&eb;e*VUA7K4/#+5!*%5e>\ZAOLF'r,ETR1pV*-(28AWQZ@p,.G]WPpdlni`C/`&lmO\M[a*k[7uK-
%ijFAX%'-u!.@8cd%S-)1$A@4<Y:D77@)i^alIJDt]7I$X2!HQZ7_3&Q4gosA+rbU/.C*Y?pJ,o<'U_<R_=JO/T.@F[:+*<FD@**2
%g^S$('*]nX]B+kI<]/sM/a8?tX!pOf<S-<s7nLnZ`1A);c9l0X<FNHTKUpj7e8M,tb``:4l[dd4TSaOI7NmDZnu)tK>rG'53:mlc
%%VOjt/JH>Q`Zn&Ll7j8nj.lt:b6upSC/8!D=;)+oG*HJMh6f3Ne%2golk>/nX"japE'AMdoHoCBH?D'\&.tW23t*(7<[q:\&?8Bf
%#RP)T=cCH:4fT*j#o><`:oiPb]FVmek=DN/B3QC'hq:_slKO-':R\5C#:-[\f*R3'9*td(n9:oQ9P8mqA>b'Sg(?91Enl')$55uT
%Y1KVD<ppSRbG>CN(c<6T`J^MLRB*F\-qS7.fn&t'hOBQ\Xqo:elK`%b`ptL#GsQnn]NR7,=Bd"Y.ReL*Af+,.lR'(GN,.`k8PS6(
%FVCou?V>Ot/Bk&YVff>Q25[RH,t\HbZu-XBbT6!rN5\6_.B=KW\6.j6>;qJ[_9D3l2G&l$:MX"i90!uD9P`gANKoZ]XmWiGQq"?@
%eIrM!qqC=<+f]q1l3T84W5diM6"?H*2-2KNhq$(=6X)VWV.8m44W:BaJ;s5C^tK.LH.Z3FK&H2GXB&.;Q_\#e'bk-lioG#=DGQP>
%!g_57S#hsnXg.)f-$0FE=@.q;WfJI5bACTQ9,bub>=(uK0].-^XY@a_N$T1@J^k2A=[I*7!buX[6D75c*)0)i$u8LLT:UH;m?>,*
%\cKeP\t/Vr'.ub_#@<e9?1OV9IJNj@2\28,2uAB*miO4_Jh-54pJ7,OqtKb"gpDNX\prB$*rg?^=$UMc<h'uZ^\cR+bm3AC]79UY
%@c)V5["#U!^8hN_hs[1\qnMO%[,g8>0&L!mI:#Y/+";>e$e`;+X\I>tnOEr#QV7o3DtJrpJ+poLD%\ee5E=k54o:B!DfD?#I^GB4
%rTs2YDiXgH#V;n\~>
%AI9_PrivateDataEnd
